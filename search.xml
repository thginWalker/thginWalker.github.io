<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[git的常规使用]]></title>
      <url>/2.html/</url>
      <content type="html"><![CDATA[<p>首先需要本地git与远程github相连接。采取SSH连接方式。</p>
<h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><h4 id="1-创建ssh-key"><a href="#1-创建ssh-key" class="headerlink" title="1. 创建ssh key"></a>1. 创建ssh key</h4><p>为了让github能够识别是我们自己上传文件，需要创建ssh key<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ssh-keygen -t rsa -C &quot;your_email@youreamil.com&quot;</div></pre></td></tr></table></figure></p>
<p>这里的your_email@youremail.com是你的邮箱地址，在输入后会询问你是否保存创建的ssh key，点回车就好，然后要求输入你要设置的密码，如果直接回车表示不设密码。然后会提示你ssh key已经创建好。</p>
<h4 id="2-将ssh写入github"><a href="#2-将ssh写入github" class="headerlink" title="2. 将ssh写入github"></a>2. 将ssh写入github</h4><p>在windows中生成的id_rsa.pub文件一般在C:\Users\windows用户名\.ssh目录下，打开隐藏文件即可看到。<br>复制出来，在github在点击头像，然后点击setting，在找到SSH and GPG keys，创建一个new ssh key，然后将刚刚复制的ssh key填入即可。</p>
<h4 id="3-验证是否连接成功"><a href="#3-验证是否连接成功" class="headerlink" title="3. 验证是否连接成功"></a>3. 验证是否连接成功</h4><p>在终端输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>如果回车看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">You’ve successfully authenticated, but GitHub does not provide shell access 。</div></pre></td></tr></table></figure></p>
<p>表示已成功连上github。</p>
<h4 id="4-设置username和email"><a href="#4-设置username和email" class="headerlink" title="4. 设置username和email"></a>4. 设置username和email</h4><p>在把本项目上传到github之前还需要分别输入设置username和email，因为github每次commit都会记录他们。所以分别输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;your name&quot;</div><div class="line">$ git config --global user.email &quot;your_email@youremail.com&quot;</div></pre></td></tr></table></figure></p>
<h4 id="5-添加远程地址"><a href="#5-添加远程地址" class="headerlink" title="5. 添加远程地址"></a>5. 添加远程地址</h4><p>在与github连接成功后，如何才能让相应的项目上传到对应的仓库呢？这里就需要添加远程地址，从而让我们的本地项目顺利到达对应的仓库。</p>
<p>打开终端，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:yourName/yourRepo.git</div></pre></td></tr></table></figure></p>
<h3 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h3><h4 id="1-进入项目，在终端运行"><a href="#1-进入项目，在终端运行" class="headerlink" title="1.进入项目，在终端运行"></a>1.进入项目，在终端运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure>
<p>查看当前目录索引还没有被git管理的文件和被git管理而被修改但还没有提交(git commit)的文件。</p>
<h4 id="2-将远程库与本地库合并"><a href="#2-将远程库与本地库合并" class="headerlink" title="2.将远程库与本地库合并"></a>2.将远程库与本地库合并</h4><p>(注:pull=fetch +merge )：(刚刚添加时本地没有说明文件)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull --rebase origin master</div></pre></td></tr></table></figure></p>
<h4 id="3-然后上传所有"><a href="#3-然后上传所有" class="headerlink" title="3.然后上传所有"></a>3.然后上传所有</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add .</div></pre></td></tr></table></figure>
<h4 id="4-添加注释并上传到缓存区"><a href="#4-添加注释并上传到缓存区" class="headerlink" title="4.添加注释并上传到缓存区"></a>4.添加注释并上传到缓存区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m  &apos;本次提交注释&apos;</div></pre></td></tr></table></figure>
<p>提交并上传代码，第一次提交加上’-u’,后面提交可以省略。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin master</div></pre></td></tr></table></figure></p>
<h3 id="以后提交"><a href="#以后提交" class="headerlink" title="以后提交"></a>以后提交</h3><ul>
<li><p>上传所有</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add .</div></pre></td></tr></table></figure>
</li>
<li><p>添加注释并上传到缓存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m  &apos;本次提交注释&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>提交并上传代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如此往复即可。</p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[建立博客]]></title>
      <url>/1.html/</url>
      <content type="html"><![CDATA[<p>由于诸多原因，我最终选择了hexo+github搭建博客，原因嘛有很多。但是markdown的编写方式和纯命令的编辑方式是我所喜爱的。<br><a id="more"></a><br>我不知道在其他人眼里git意味着什么，但是不知不觉中我觉得我思想发生了一些改变。喜欢上了一些高大上的程序员方式。<br>之前打算用yii2.0搭建博客，但是markdown插件弄了好久都没有弄出来，然后按照yii2.0博客程序也存在弊端；node.js搭建博客弄了弄，发现英文大多不太喜欢，而且服务器的配置太繁琐，不想hexo几行命令即可搞定。<br>不过我从头到尾都没有想过使用WordPress，原因很简单，没有轻量级的书写方式，不够简洁，我觉得博客的本质应该是写作。<br>专注于写作和学习，这才是我建立博客的主旨。</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
