<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小小博客</title>
  <subtitle>每天进步一点点。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jb-hacker.top/"/>
  <updated>2018-01-07T07:56:45.373Z</updated>
  <id>http://www.jb-hacker.top/</id>
  
  <author>
    <name>夜行者</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://www.jb-hacker.top/%E3%80%8A%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97%E3%80%8B.html/"/>
    <id>http://www.jb-hacker.top/《乌合之众》.html/</id>
    <published>2018-01-07T07:55:10.847Z</published>
    <updated>2018-01-07T07:56:45.373Z</updated>
    
    <content type="html"><![CDATA[<p>dsdsds</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;dsdsds&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《风之影》</title>
    <link href="http://www.jb-hacker.top/%E3%80%8A%E9%A3%8E%E4%B9%8B%E5%BD%B1%E3%80%8B.html/"/>
    <id>http://www.jb-hacker.top/《风之影》.html/</id>
    <published>2018-01-06T16:00:00.000Z</published>
    <updated>2018-01-07T09:53:29.689Z</updated>
    
    <content type="html"><![CDATA[<p><code>世上还有比文字世界更难熬的炼狱。</code><br><a id="more"></a><br>用心的读完了这本书，让我有些许的感慨和莫名的心动。是的，这本《风之影》的书中也存在着一本《风之影》，当达涅尔的父亲森贝雷带领他前去”遗忘书之墓”挑选图书时，这本《风之影》神奇般的被主角选中，是的。因此寻找作者胡里安·卡拉斯的记忆也被迫打开了。<br>少年的达涅尔喜欢上了长他十几岁的迷人的盲女克拉拉，只是当达涅尔十六岁生日时苦苦寻找克拉拉时，在克拉拉的门前看到了她正一丝不挂地和聂利老师缠绵，那温柔的娇嗔声打破了达涅尔所谓的初恋吧！<br>也许在挨揍之后他认识了他最重要的朋友–流浪汉费尔明·罗梅罗·德·托雷斯，在他的陪伴下达涅尔得到了理想的平静。<br>一个《风之影》中的恶魔拉因·谷柏满世界的想摧毁胡里安的作品，一旦找到，就不顾一切的烧毁它。<br>达涅尔凭借着对《风之影》的执着，一步步地探索卡拉斯的一切。在不断的追寻之下，我们对卡拉斯的记忆一点点的补全了。<br>胡利安原本是帽子师傅安东尼·福尔杜尼的”儿子”，其实际我们了解到他是苏菲和里卡多·阿尔达亚激情的产物，胡利安的母亲苏菲在父亲临死前可以去巴塞罗找企业家贝纳伦先生，请他帮忙安插职务。可实际在热情之中贝纳伦先生在夜里上了她的床，也许帽子先生的愚蠢得到了苏菲的最终求婚吧!只是日后的帽子先生对苏菲无尽的家暴。<br>也许是冥冥中注定，里卡多最终想去找那个孩子，也就是胡利安。从此卡拉斯的世界得到了升华，可是在卡拉斯眼里只有他的女儿佩内洛佩，在  胡利安和佩内洛佩两人赤裸相拥时，里卡多对他的两个孩子掀起了盲目的仇恨。<br>胡利安在好友米盖尔的帮助下逃脱了里卡多和安东尼的谋杀，在故事的中间傅梅洛警官–一个刽子手，在拯救胡利安的过程中米盖尔献出了自己的生命，由于傅梅洛警官对佩内洛佩的爱恋，他一直想杀害胡利安；也许让我不能平静的是：佩内洛佩难产的血崩，在上了锁的房里呼喊、撞门。最后她的生命和求救声一起画上了休止符，在书中的描述中，在房门被打开时，佩内洛佩已经气绝身亡，她倒卧在组合身上流出的那摊血泊中，怀里抱着全身紫得发亮的胎儿。当我看到此处，我无法忍受这惨绝人寰的谋杀。<br>也许胡利安在穷困潦倒中度过了它的余生，在生命的历程中他认识了他的崇拜者努丽亚·蒙佛特，在他失去生活能力时，这个女人给了他长久的无私照料。最终在她那一摞手稿中我们收获了最终的真相，但是她却为此永远地付出了自己的生命。<br>达涅尔在寻找真相的同时，也收获了和贝亚的幸福。玩世不恭的费尔明和贝尔纳达也走进了婚姻殿堂。只是克拉拉最终的孤独和不幸本身就无法言语。<br>也许在故事的最后我们明白那个恶魔拉因·谷柏正是胡利安，在那场大火中他最终失去了最真实的自己。也许是达涅尔的言行下，傅梅洛警官最终结束了他那肮脏的一生，最终胡利安重新执笔，那本献给达涅尔和贝亚特丽丝的《雾中天使》，我相信胡利安获得了永生。<br>我们可以想象故事画上了一个句号，但巴塞罗那不仅仅有灿烂的阳光和热辣辣的斗牛赛，更多的是阴霾，是雾气，是剪不断理还乱的风中幻影，充满了爱恨情仇。<br>生命一直在继续，<code>如果您想彻底地拥有一个女人，那么，您就要学着像她那样去思考，因为，最重要的是能不能虏获她的芳心，至于那诱人的胴体，虽然让人神魂颠倒，也不过是额外的赠品罢了。</code>这是费尔明对达涅尔的劝告，可最后的最后，爱情在达涅尔和费尔明的身上得到了最好的体现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;世上还有比文字世界更难熬的炼狱。&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://www.jb-hacker.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="百书计划" scheme="http://www.jb-hacker.top/tags/%E7%99%BE%E4%B9%A6%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>《百书计划》简述</title>
    <link href="http://www.jb-hacker.top/%E3%80%8A%E7%99%BE%E4%B9%A6%E8%AE%A1%E5%88%92%E3%80%8B%E7%AE%80%E8%BF%B0.html/"/>
    <id>http://www.jb-hacker.top/《百书计划》简述.html/</id>
    <published>2018-01-06T16:00:00.000Z</published>
    <updated>2018-01-07T09:57:30.274Z</updated>
    
    <content type="html"><![CDATA[<p>鸟欲高飞先振翅，人求上进先读书。 –李若禅<br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>由于这个学期扎根于图书馆的缘故，直接和间接地看了很多名著。可悲的是，当放下那本书拿起另一本书时，对于原来的记忆销声匿迹了。我想这是可怕的，也许是应该写些什么留下一些美好的回忆；是的，我喜爱阅读，更加喜欢写作。<br>因此我决定自我发起”百书计划”，针对自己在大学生活留下一丝烟缕，恰然地随风而逝。</p>
<h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>其实自身早已逐渐地迷上了阅读，沉入书上经历着主人公所经历的一切，仿佛不在受这个时代、这个现实所约束，视乎生活在书中所在的那个特定时代、那个特别的场景。说实话，我享受这种经历。<br>可悲的是，我并不是能完全地理解作者那深邃的思想，有时一本书过后，我仍无法体会作者的情感表达。正如钱钟书的《围城》来说，自始至终我都无法理会方鸿渐般的无奈，但我理解的是，这往往受我自身的水平所局限，因此在日后的某天回想起来我终究能感慨到他的不幸冥冥中自有天定。</p>
<h2 id="名单"><a href="#名单" class="headerlink" title="名单"></a>名单</h2><p>读后感名单，会是最好的计划见证。</p>
<ul>
<li><a href="http://www.jb-hacker.top/%E3%80%8A%E9%A3%8E%E4%B9%8B%E5%BD%B1%E3%80%8B.html/">《风之影》</a></li>
<li>《乌合之众》</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>也许我深受<a href="http://www.ruanyifeng.com/home.html" target="_blank" rel="external">阮一峰</a>博主的影响吧。他的文章包含的内容非常广博，涉及读书、版权制度、经济学、英语、历史、IT技术、医学、电影、音乐和美术、政治学、科学、创业、互联网等23个大的分类，其中有的分类还包括一些更细的子条目。<br>他让我明白人不应该受周围所局限，上海财经大学世界经济博士研究生却是一个IT技术人员，也许对我而言不应该仅仅被技术所限制，毕竟遨游在知识的海洋让自己能够更加充实。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鸟欲高飞先振翅，人求上进先读书。 –李若禅&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://www.jb-hacker.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="百书计划" scheme="http://www.jb-hacker.top/tags/%E7%99%BE%E4%B9%A6%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>论考研内心的躁动</title>
    <link href="http://www.jb-hacker.top/%E8%AE%BA%E8%80%83%E7%A0%94%E5%86%85%E5%BF%83%E7%9A%84%E8%BA%81%E5%8A%A8.html/"/>
    <id>http://www.jb-hacker.top/论考研内心的躁动.html/</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2018-01-07T06:25:35.703Z</updated>
    
    <content type="html"><![CDATA[<p>We already walked too far, down to we had forgotten why embarked.<br><code>我们已经走得太远，以至于忘记了为什么而出发。</code><br><a id="more"></a></p>
<h2 id="小感"><a href="#小感" class="headerlink" title="小感"></a>小感</h2><p>今天早晨6:03分在宿舍的楼梯看见了我”大哥”,看的出来我”大哥”已经全身心投入考研的准备了。而此刻的我仍处于迷茫之中。<br>随后简单的吃完早饭，打破常规的能够早起前去图书馆。仍在看朱伟的《恋练有词》的导读部分，才感慨学习绝不是一蹴而就，它有的往往的日常平凡的坚守。<br>我深知处于实训的我的迷茫，绝不是他人所能理解的。有的时候才发现往往不是自己不够优秀，而是自己不够努力。</p>
<h2 id="关于考研"><a href="#关于考研" class="headerlink" title="关于考研"></a>关于考研</h2><p>虽说考研心思早已萌发，但却仍为起步。之前的自己认为一切皆有可能，后来才发现不得不想现实低头。其实从真正开始面对软考”网络工程师”时就早有体会了。<br>从工作室的学哥学姐考研的经历让我深刻意识到了考研并没有想象中的那么简单。当然，在有心人眼里也没有想象中的那么困难。无论如何，放手一搏，终能成功一帆事业。</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>考研故有专硕与学硕之分，想必对于一个考研人来说往往万分纠结。当然笔者也不例外，只是思想发生了转变。之前的自己选择了专硕，往往认为只要能够考上研究生就可以了，但最终记住了这句话:<code>优秀的唯一方法是不降低对自己的要求。</code><br>为此我选择了学硕，只是希望自己能够对人生的学习能够画上一个圆满的结束。是的！我想考博，对于此刻还是一个普通的本科生竟然会有如何的想法。<br>我始终想去国外见证真正的世界吧，还是这句话说得不错:<code>世界很大，我想去看看。</code><br>之所以能够在这世界上来一遭，我想就不应该活得如何平庸吧！<br>今天的自己用自己的话激励自己:<code>我是很卑微，但我不想活得如此卑微。</code></p>
<h3 id="专业"><a href="#专业" class="headerlink" title="专业"></a>专业</h3><p>本身的专业是”软件工程”，考研专业仍在”软件工程”吧，即使此刻的自己对”网络安全”和”人工智能”痴迷。但我知道在技术的道路上我能够走得很遥远，不为其他，只为心中那份坚守。</p>
<h3 id="地区"><a href="#地区" class="headerlink" title="地区"></a>地区</h3><p>也许可能是家在安徽与湖北的交接处吧！况且湖北的省会”武汉”是一个现代化城市。<br>我觉得选择”武汉理工”是一个个冥冥之中的决定，况且学姐将是一个很好的引路人，我相信紧跟她的步伐我一定能够走得更远。</p>
<h2 id="写给自己"><a href="#写给自己" class="headerlink" title="写给自己"></a>写给自己</h2><p>也许很多时候做好自己就行，不要去考虑那些子虚乌有的事情。对于自身而言:</p>
<ul>
<li>目标要求远大</li>
<li>心胸要求广阔</li>
<li>学习要求刻苦</li>
<li>努力要求淡然</li>
</ul>
<p>不顾一切的去拼搏去追寻，至于结果本身早已是铁板钉钉的事实了。做好自己，用一颗平常心去寻找自己想要的一切。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We already walked too far, down to we had forgotten why embarked.&lt;br&gt;&lt;code&gt;我们已经走得太远，以至于忘记了为什么而出发。&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://www.jb-hacker.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="心情小记" scheme="http://www.jb-hacker.top/tags/%E5%BF%83%E6%83%85%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>华为命令配置专题</title>
    <link href="http://www.jb-hacker.top/%E5%8D%8E%E4%B8%BA%E5%91%BD%E4%BB%A4%E9%85%8D%E7%BD%AE%E4%B8%93%E9%A2%98.html/"/>
    <id>http://www.jb-hacker.top/华为命令配置专题.html/</id>
    <published>2017-11-03T16:00:00.000Z</published>
    <updated>2018-01-07T04:51:15.100Z</updated>
    
    <content type="html"><![CDATA[<p>学习网络的同学都能明白，思科视乎一家独大，但是在发展的潮流中华为也紧跟不舍，所以对于我们学习华为命令的配置也变得重要了。<br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>华为虽然对于交换机、路由器的配置和思科不大相同，但是我们能够理解的是不同的只是形式，其内部协议、原理也不过尔尔而已。<br>(针对此配置笔者了解甚少，多看书中实例理解)</p>
<h2 id="命令视图"><a href="#命令视图" class="headerlink" title="命令视图"></a>命令视图</h2><ol>
<li><p>用户视图(查看交换机简单运行状态和统计信息)</p>
<blockquote>
<p><quidway>:        与交换机建立连接即进入</quidway></p>
</blockquote>
</li>
<li><p>系统视图(配置系统参数)</p>
<blockquote>
<p>[Quidway]:       在用户视图下键入system-view</p>
</blockquote>
</li>
<li><p>以太网视图(配置以太网端口参数)</p>
<blockquote>
<p>[Quidway-Ethernet0/1]:       在系统视图下键入interface ethernet 0/1</p>
</blockquote>
</li>
</ol>
<ol>
<li><p>VLAN视图(配置VLAN参数)</p>
<blockquote>
<p>[Quidway-Vlan1]:       在系统视图下键入vlan 123</p>
</blockquote>
</li>
<li><p>VLAN接口视图(配置VLAN和VLAN汇聚对应的IP接口参数)</p>
<blockquote>
<p>[Quidway-Vlan1-interface]:       在系统视图下键入interface vlan-interface 123</p>
</blockquote>
</li>
<li><p>本地用户视图(配置本地用户参数)</p>
<blockquote>
<p>[Quidway-luser-user1]:       在系统视图下键入local-user-user1</p>
</blockquote>
</li>
<li><p>用户界面视图(配置用户界面参数)</p>
<blockquote>
<p>[Quidway-ui0]:       在系统视图下键入user-interface</p>
</blockquote>
</li>
</ol>
<h2 id="VLAN配置方法"><a href="#VLAN配置方法" class="headerlink" title="VLAN配置方法"></a>VLAN配置方法</h2><p>『配置环境参数』<br>SwitchA端口E0/1属于VLAN2、E0/2属于VLAN3<br>『组网需求』<br>把交换机端口E0/1就让到VLAN2、E0/2加入到VLAN3<br>数据配置步骤<br>『VLAN配置流程』</p>
<ol>
<li>缺省情况下所有端口都属于VLAN1，并且端口是access端口，一个access端口智能属于一个vlan;</li>
<li>如果端口是access端口，则把端口加入到另外一个vlan的同时，系统自动把该端口从原来的vlan中删除掉；</li>
<li>除了VLAN1，如果VLAN XX不存在，在系统视图下键入VLAN XX，则创建VLAN XX并进入VLAN XX视图；如果VLAN XX已经参照，则进入VLAN视图。</li>
</ol>
<p>解析<br>【SwitchA相关配置】</p>
<ul>
<li><p>方法一:</p>
<ol>
<li><p>创建(进入)vlan 2</p>
<blockquote>
<p> [SwitchA]vlan 2</p>
</blockquote>
</li>
<li><p>将端口E0/1加入到vlan 2</p>
<blockquote>
<p> [SwitchA-vlan2]port ethernet 0/1</p>
</blockquote>
</li>
<li><p>创建(进入)vlan 3</p>
<blockquote>
<p>[SwitchA-vlan2]vlan 3</p>
</blockquote>
</li>
<li><p>将端口E0/2加入到vlan3</p>
<blockquote>
<p>[SwitchA-vlan3]port ethernet 0/2</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<ul>
<li><p>方法二</p>
<ol>
<li><p>创建(进入)vlan 2</p>
<blockquote>
<p> [SwitchA]vlan 2</p>
</blockquote>
</li>
<li><p>进入端口E0/1视图</p>
<blockquote>
<p> [SwitchA]interface ethernet 0/1</p>
</blockquote>
</li>
<li><p>指定端口E0/1属于vlan2</p>
<blockquote>
<p>[SwitchA-ethernet]port access vlan 2</p>
</blockquote>
</li>
<li><p>创建(进入)vlan 3</p>
<blockquote>
<p> [SwitchA]vlan 3</p>
</blockquote>
</li>
<li><p>进入端口E0/1视图</p>
<blockquote>
<p> [SwitchA]interface ethernet 0/2</p>
</blockquote>
</li>
<li><p>指定端口E0/1属于vlan3</p>
<blockquote>
<p>[SwitchA-ethernet]port access vlan 3</p>
</blockquote>
</li>
</ol>
<p>测试验证</p>
</li>
<li><p>使用命令<code>disp cur</code>可以看到端口E0/1属于vlan2、E0/2属于vlan3；</p>
</li>
<li>使用<code>display interface Ethernet 0/1</code>可以看到端口为access端口、PVID为2；</li>
<li>使用<code>display interface Ethernet 0/2</code>可以看到端口为access端口、PVID为3</li>
</ul>
<h2 id="交换机IP地址配置"><a href="#交换机IP地址配置" class="headerlink" title="交换机IP地址配置"></a>交换机IP地址配置</h2><p>功能需求及组网说明<br>『配置环境参数』<br>三层交换机SwitchA有两个端口ethernet0/1、ethernet0/2，分别属于vlan 2、vlan 3；<br>以vlan 2的三层接口地址分别是1.0.0.1/24作为PC1的网关；<br>以vlan 3的三层接口地址分别是2.0.0.1/24作为PC1的网关；<br>『组网需求』(此部分为本实验重点联系内容)<br>PC1和PC2通过三层接口互通</p>
<p>解析<br>『SwitchA相关配置』</p>
<ol>
<li><p>创建(进入)vlan2</p>
<blockquote>
<p>[Quidway]vlan 2</p>
</blockquote>
</li>
<li><p>将端口E0/1加入到vlan2</p>
<blockquote>
<p>[Quidway-vlan2]port ethernet 0/1</p>
</blockquote>
</li>
<li><p>进入vlan2的虚接口</p>
<blockquote>
<p>[Quidway-vlan2]interface vlan 2</p>
</blockquote>
</li>
<li><p>在vlan2的虚接口上配置</p>
<blockquote>
<p>[Quidway-Vlan-interface2]ip address 1.0.0.1 255.255.255.0</p>
</blockquote>
</li>
<li><p>创建(进入)vlan3</p>
<blockquote>
<p>[Quidway]vlan 3</p>
</blockquote>
</li>
<li><p>将E0/2加入到vlan3</p>
<blockquote>
<p>[QUidway-Vlan3]port ethernet 0/2</p>
</blockquote>
</li>
<li><p>进入vlan3的虚接口</p>
<blockquote>
<p>[QUidway-Vlan3]interface vlan 3</p>
</blockquote>
</li>
<li><p>在vlan3的虚接口上配置IP地址</p>
<blockquote>
<p>[QUidway-Vlan-interface3]ip address 2.0.0.1 255.255.255.0</p>
</blockquote>
</li>
</ol>
<p>测试验证</p>
<ul>
<li>PC1和PC2都可以ping同自己的网关</li>
<li>PC1和PC2都可以相互ping通</li>
</ul>
<h2 id="端口trunk配置"><a href="#端口trunk配置" class="headerlink" title="端口trunk配置"></a>端口trunk配置</h2><p>内容<br>『配置环境参数』</p>
<ul>
<li>SwitchA端口E0/1属于vlan10，E0/2属于van20，E0/3与SwitchB端口E0/3互连</li>
<li>SwitchB端口E0/1属于vlan10，E0/2属于van20，E0/3与SwitchA端口E0/3互连<br>『组网需求』</li>
<li>要求SwitchA的vlan10的PC与SwitchB的vlan10的PC互通</li>
<li>要求SwitchA的vlan20的PC与SwitchB的vlan20的PC互通</li>
</ul>
<p>解析<br>数据配置步骤<br>『SwitchA相关配置』</p>
<ol>
<li><p>创建(进入)vlan10</p>
<blockquote>
<p>[SwitchA]vlan 10</p>
</blockquote>
</li>
<li><p>将E0/1加入到vlan10</p>
<blockquote>
<p>[SwitchA-vlan10]port Ethernet 0/1</p>
</blockquote>
</li>
<li><p>创建(进入)vlan20</p>
<blockquote>
<p>[SwitchA]vlan 20</p>
</blockquote>
</li>
<li><p>将E0/2加入到vlan20</p>
<blockquote>
<p>[SwitchA-vlan20]port Ethernet 0/2</p>
</blockquote>
</li>
<li><p>实际当中一般将上行端口设置成trunk属性，允许vlan透传</p>
<blockquote>
<p>[SwitchA-Ethernet0/3]port link-type trunk</p>
</blockquote>
</li>
<li><p>允许所有的vlan从E0/3端口透传通过，也可以指定具体的vlan值</p>
<blockquote>
<p>[SwitchA-Ethernet0/3]port trunk permit vlan all</p>
</blockquote>
</li>
</ol>
<p>『SwitchB相关配置』</p>
<ol>
<li><p>创建(进入)vlan10</p>
<blockquote>
<p>[SwitchB]vlan 10</p>
</blockquote>
</li>
<li><p>将E0/1加入到vlan10</p>
<blockquote>
<p>[SwitchB-vlan10]port Ethernet 0/1</p>
</blockquote>
</li>
<li><p>创建(进入)vlan20</p>
<blockquote>
<p>[SwitchB]vlan 20</p>
</blockquote>
</li>
<li><p>将E0/2加入到vlan20</p>
<blockquote>
<p>[SwitchB-vlan20]port Ethernet 0/2</p>
</blockquote>
</li>
<li><p>实际当中一般将上行端口设置成trunk属性，允许vlan透传</p>
<blockquote>
<p>[SwitchB-Ethernet0/3]port link-type trunk</p>
</blockquote>
</li>
<li><p>允许所有的vlan从E0/3端口透传通过，也可以指定具体的vlan值</p>
<blockquote>
<p>[SwitchB-Ethernet0/3]port trunk permit vlan all</p>
</blockquote>
</li>
</ol>
<p>【补充说明】</p>
<ul>
<li>如果一个端口是trunk端口，则该端口可以属于多个vlan；</li>
<li>缺省情况下trunk端口的PVID为1，可以在端口模式下通过命令port trunk vlan vlanid 来修改端口的PVID；</li>
<li>如果从trunk转发出去的数据报文的vlan id和端口的PVID一致，则该报文的VLAN会被剥去，这点在配置trunk端口时需要注意；</li>
<li>一台交换机上如果已经设置了某个端口为hybrid端口，则不可以再把另外的端口设置为trunk端口；</li>
<li>一般情况下最好指定端口允许通过哪些具体的VLAN，不要设置允许所有的VLAN通过。</li>
</ul>
<p>测试验证</p>
<ol>
<li>SwitchA vlan10内的PC可以与SwitchB vlan10内的PC互通</li>
<li>SwitchA vlan20内的PC可以与SwitchB vlan20内的PC互通</li>
<li>SwitchA vlan10内的PC不能与SwitchB vlan20内的PC互通</li>
<li>SwitchA vlan20内的PC不能与SwitchB vlan10内的PC互通</li>
</ol>
<h2 id="端口汇聚配置"><a href="#端口汇聚配置" class="headerlink" title="端口汇聚配置"></a>端口汇聚配置</h2><p> 内容<br>『配置环境参数』</p>
<ol>
<li>交换机SwitchA和SwitchB通过以太网口实现互连。</li>
<li>SwitchA用于互连的端口为e0/1和e0/2，SwitchB用于互连的端口为e0/1和e/2。</li>
</ol>
<p>『组网需求』<br>增加SwitchA的SwitchB的互连链路的带宽，并且能够实现链路备份，使用端口汇聚 数据配置步骤<br>解析<br>【SwitchA交换机配置】</p>
<ol>
<li><p>进入端口E0/1</p>
<blockquote>
<p>[SwitchA]interface Ethernet 0/1</p>
</blockquote>
</li>
<li><p>汇聚端口必须关注在全双工模式</p>
<blockquote>
<p>[SwitchA-Ethernet0/1]duplex full</p>
</blockquote>
</li>
<li><p>汇聚的端口速率要求相同，但不能是自适应</p>
<blockquote>
<p>[SwitchA-Ethernet0/2]speed 100</p>
</blockquote>
</li>
<li><p>进入端口E0/2</p>
<blockquote>
<p>[SwitchA]interface Ethernet 0/2</p>
</blockquote>
</li>
<li><p>汇聚端口必须关注在全双工模式</p>
<blockquote>
<p>[SwitchA-Ethernet0/2]duplex full</p>
</blockquote>
</li>
<li><p>汇聚的端口速率要求相同，但不能是自适应</p>
<blockquote>
<p>[SwitchA-Ethernet0/2]speed 100</p>
</blockquote>
</li>
<li><p>根据源和目的MAC进行端口选择汇聚</p>
<blockquote>
<p>[SwitchA]link-aggergation Ethernet 0/1 to Ethernet 0/2 both</p>
</blockquote>
</li>
</ol>
<p>【SwitchB交换机配置】</p>
<blockquote>
<p>[SwitchB]interface Ethernet 0/1<br>[SwitchB-Ethernet0/1]duplex full<br>[SwitchB-Ethernet0/2]speed 100<br>[SwitchB]interface Ethernet 0/2<br>[SwitchB-Ethernet0/2]duplex full<br>[SwitchB-Ethernet0/2]speed 100<br>[SwitchB]link-aggergation Ethernet 0/1 to Ethernet 0/2 both</p>
</blockquote>
<p>【补充说明】</p>
<ul>
<li>同一个汇聚组中成员端口的链接类型与注端口的链路类型保存一致，即如果主端口为Trunk端口，则成员端口也为Trunk端口；<br>如主端口的链路类型改为Access端口，则成员端口的链路类型也变为Access端口。</li>
<li>不同的产品对端口汇聚是的起始端口号要去各有不同，请对照《操作手册》进行配置。</li>
</ul>
<h2 id="端口镜像配置"><a href="#端口镜像配置" class="headerlink" title="端口镜像配置"></a>端口镜像配置</h2><p>内容<br>『环境配置参数』</p>
<ol>
<li>PC1接在交换机E0/1端口，IP地址1.1.1.1/24</li>
<li>PC2接在交换机E0/2端口，IP地址2.2.2.2/24</li>
<li>E0/24为交换机上行端口</li>
<li>Server接在交换机E0/8端口，盖端口作为镜像端口</li>
</ol>
<p>『组网需求』</p>
<ol>
<li>通过交换机端口镜像的功能使用server对两台pc的业务报文进行监控。<br>根据Qidway交换机不同型号，镜像有不同方式进行配置:基于端口的进行 基于断句的镜像十八辈镜像端口的进出数据报文完全拷贝一份到镜像端口，这样来进行流量观测或者故障定位。</li>
</ol>
<p>基于流的镜像 基于流镜像的交换机针对某些流进行镜像，每个连接都有两个方向的数据流，对于交换机来说这两个数据流是要分开镜像的。</p>
<p>S2008/S2016/S2026/S2403H/S3026等交换机支持的都是基于端口的镜像<br>8016交换机支持基于端口的镜像<br>3500/3026E/3026F/2050支持基于流的镜像<br>5516/6505/6503/6506R支持对入端口流量进行镜像</p>
<p>解析<br>数据配置步骤<br>以Quidway S3026C为例，通过基于二层流的镜像进行配置：</p>
<ol>
<li><p>定义一个ACL</p>
<blockquote>
<p>[SwitchA]acl num 200</p>
</blockquote>
</li>
<li><p>定义一个规则从E0/1发送至其它所有端口的数据包</p>
<blockquote>
<p>[SwitchA]rule 0 permir ingress interface Ethernet0/1 egress interface Ethernet 0/2</p>
</blockquote>
</li>
<li><p>定义一个规则从其它所有端口到E0/1端口的数据包</p>
<blockquote>
<p>[SwitchA]rule 1 permir ingress interface Ethernet0/2 egress interface Ethernet 0/1</p>
</blockquote>
</li>
</ol>
<ol>
<li>将符合上述ACL的数据包镜像到E0/8<blockquote>
<p>[SwitchA]mirrored-to link-group 200 interface e0/8</p>
</blockquote>
</li>
</ol>
<h2 id="生成树STP配置"><a href="#生成树STP配置" class="headerlink" title="生成树STP配置"></a>生成树STP配置</h2><p>内容<br>『配置环境参数』</p>
<ol>
<li>交换机SwitchA、SwitchB和SwitchC都通过GE接口互连</li>
<li>SwitchB和SwitchC交换机是核心交换机，要求主备</li>
</ol>
<p>『组网要求』要求整个网络运行STP协议 数据配置步骤</p>
<p>解析</p>
<ol>
<li><p>【SwitchA交换机配置】启动生成树协议：</p>
<blockquote>
<p>[SwitchA]stp enable</p>
</blockquote>
</li>
<li><p>【SwitchB交换机配置】启动生成树协议：</p>
<blockquote>
<p>[SwitchB]stp enable</p>
</blockquote>
</li>
<li><p>配置本桥为根桥</p>
<blockquote>
<p>[SwitchB] stp root primary</p>
</blockquote>
</li>
<li><p>【SwitchC交换机配置】<br>a 启动生成树协议</p>
<blockquote>
<p>[SwitchC]stp enable</p>
</blockquote>
</li>
</ol>
<p>b 配置本桥为备份根桥</p>
<blockquote>
<p>[SwitchC]stp root secondary</p>
</blockquote>
<p>  5.【SwitchD交换机配置】<br>  a 启动生成树协议</p>
<blockquote>
<p>[SwitchD]stp enable</p>
</blockquote>
<p>【补充说明】</p>
<ol>
<li>缺省情况下交换机的优先级都是32768，如果想人为指定某一台交换机为根交换机，也可以通过修改优先级来实现；</li>
<li>缺省情况下打开生成树后，所有端口都会开启生成树解析，请把接PC的端口改为边缘端口模式；</li>
<li>如果要控制某条链路的状态可以通过设置端口的cost值来实现</li>
</ol>
<p>测试验证</p>
<ol>
<li>使用display stp查看交换机STP运行状态</li>
<li>查看端口STP状态display stp interface Ethernet XX是否正确</li>
</ol>
<h2 id="Quidway交换机维护"><a href="#Quidway交换机维护" class="headerlink" title="Quidway交换机维护"></a>Quidway交换机维护</h2><p>内容<br>显示系统版本信息: <code>display version</code><br>显示诊断信息: <code>display diagnostic-information</code><br>显示系统当前配置: <code>display current-configuration</code><br>显示系统保存配置: <code>display saved-configuration</code><br>显示接口信息: <code>display interface</code><br>显示路由信息: <code>display ip routing-table</code><br>显示VLAN信息: <code>display vlan</code><br>显示生成树信息: <code>display stp</code><br>显示MAC地址表: <code>display mac-address</code><br>显示ARP表信息: <code>display arp</code><br>显示系统CPU使用率: <code>display memory</code><br>显示系统日志: <code>display log</code><br>显示系统时钟: <code>display clock</code><br>删除某条命令，一般使用命令<code>undo</code></p>
<p>解析</p>
<ul>
<li><p>【SwitchA交换机配置】启动生成树协议:</p>
<blockquote>
<p>[SwitchA]stp enable</p>
</blockquote>
</li>
<li><p>【SwitchB交换机配置】启动生成树协议:</p>
<blockquote>
<p>[SwitchB]stp enable</p>
</blockquote>
</li>
<li><p>配置本桥为根桥</p>
<blockquote>
<p>[SwitchB]stp root primary</p>
</blockquote>
</li>
<li><p>【SwitchC交换机配置】<br> a. 启动生成树协议:</p>
<blockquote>
<p>[SwitchC]stp enable</p>
</blockquote>
</li>
</ul>
<pre><code>b. 配置本桥为备份根桥
</code></pre><blockquote>
<p>[SwitchC]stp root secondary</p>
</blockquote>
<ul>
<li>【SwitchD交换机配置】<br> a. 启动生成树协议:<blockquote>
<p>[SwitchD]stp enable</p>
</blockquote>
</li>
</ul>
<p>【补充说明】</p>
<ul>
<li>缺省情况下交换机的优先级都是32768，如果想认为指定某一台交换机为根交换机，也可以通过修改优先级来实现；</li>
<li>缺省情况下打开生成树后，所有端口都会开启生成树协议，请把接PC的端口改为边缘端口模式；</li>
<li>如果要控制某条链路的状态可以通过设置的cost值来实现。</li>
</ul>
<p>测试验证</p>
<ol>
<li>使用display stp查看交换机STP运行状态</li>
<li>查看端口STP状态display stp interface Ethernet XX是否正确</li>
</ol>
<p><strong>以上就是对华为命令配置专题的小小见解。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习网络的同学都能明白，思科视乎一家独大，但是在发展的潮流中华为也紧跟不舍，所以对于我们学习华为命令的配置也变得重要了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络攻防" scheme="http://www.jb-hacker.top/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="网络技术" scheme="http://www.jb-hacker.top/tags/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>IPv6配置与部署</title>
    <link href="http://www.jb-hacker.top/IPv6%E9%85%8D%E7%BD%AE%E4%B8%8E%E9%83%A8%E7%BD%B2.html/"/>
    <id>http://www.jb-hacker.top/IPv6配置与部署.html/</id>
    <published>2017-10-27T16:00:00.000Z</published>
    <updated>2018-01-07T05:03:09.887Z</updated>
    
    <content type="html"><![CDATA[<p>由于从IPv4向IPv6过渡是大势所趋，因此就目前学习IPv6来说可谓明智之举。<br><a id="more"></a><br>就目前而言从IPv4向IPv6过渡的技术，主要分为<code>双栈</code>、<code>隧道</code>和<code>翻译</code>三种。</p>
<h2 id="IPv6-over-IPv4-GRE隧道配置"><a href="#IPv6-over-IPv4-GRE隧道配置" class="headerlink" title="IPv6-over-IPv4 GRE隧道配置"></a>IPv6-over-IPv4 GRE隧道配置</h2><p>IPv6-over-IPv4 GRE隧道是将IPv6报文封装在IPv4报文中，让IPv6数据包穿过IPv4网络进行通信。对于采用隧道技术的设备涞水，在隧道的入口出，将IPv6的数据报封装进IPv4,IPv4报文的源地址和目前地址分贝是隧道入库和隧道出口IPv4地址。<br>GRE隧道的相关配置命令<br>|命令|功能|<br>|::|::|<br>| interface 隧道接口号 | 启用隧道<em>隧道接口号</em> |<br>| ipv6 address ipv6地址/前缀长度 | 为tunnel配置IPv6地址|<br>| tunnel source ipv4地址 | 指定tunnel的源地址(也可是端口号) |<br>| tunnel destination ipv4地址 | 指定tunnel的目的地址 |<br>| tunnel mode gre ipv6 | tunnel模式为IPv6的GRE隧道|<br>配置隧道:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">R1(config)#interface tunnel 0</div><div class="line">R1(config-if)#tunnel source s1/0</div><div class="line">R1(config-if)#tunnel destination 202.100.2.2</div><div class="line">R1(config-if)#ipv6 address 2005:AAAA::1/64</div><div class="line">R1(config-if)#tunnel mode gre ipv6</div></pre></td></tr></table></figure></p>
<h2 id="ISATAP隧道配置"><a href="#ISATAP隧道配置" class="headerlink" title="ISATAP隧道配置"></a>ISATAP隧道配置</h2><p>站内自动隧道寻找寻址协议(ISATAP)过渡技术采用了双栈和隧道技术实现从IPv4向IPv6的过渡。<br>采用IASATAP地址，格式为Prefix(64bit):0:5EFE:IPv4地址，其中0:5EFE是IANA规定的格式。<br>ISATAP隧道协议使用于IPv4网络中IPv6主机的通信或IPv4网络中IPv4主机接入到IPv6网络的通信。<br>|命令|功能|<br>|::|::|<br>| tunnel mode ipv6 ip isatap | tunnel模式为IPv6的ISATAP隧道|<br>| no ipv6 nd suppress-ra | 启动隧道口的路由器广播 |<br>配置代码略</p>
<h2 id="NAT—PT"><a href="#NAT—PT" class="headerlink" title="NAT—PT"></a>NAT—PT</h2><p>网络地址转换协议转换(NAT-PT)是一种纯IPv6节点和IPv4节点的互通方式，所有包括地址、协议在内的转换工作都有网络设备来完成。</p>
<h3 id="静态NAT-PT"><a href="#静态NAT-PT" class="headerlink" title="静态NAT-PT"></a>静态NAT-PT</h3><p>(静态一对一)<br>|命令|功能|<br>|::|::|<br>| ipv6 nat | 启用NAT-PT机制 |<br>| ipv6 nat prefix ipv6地址/前缀长度 | 说明NAT-PT使用的IPv6前缀|<br>| ipv6 nat v6v4 source ipv6地址 | 强制将IPv6地址的输出IPv6数据包转换成IPv4数据包 |<br>| ipv6 nat v4v6 source ipv4地址 | 强制将IPv4地址的输出IPv4数据包转换成IPv6数据包 |</p>
<h3 id="动态NAT-PT"><a href="#动态NAT-PT" class="headerlink" title="动态NAT-PT"></a>动态NAT-PT</h3><p>(动态一对一)需要一个IPv4地址池。<br>|命令|功能|<br>|::|::|<br>| ipv6 <strong>access-list</strong> name <strong>permit</strong> ipv6地址/前缀|     定义运行被转换的ipv6地址范围 |<br>| ipv6 nat v6v4 <strong>pool</strong>ipv4-pool  开始ipv4地址 结束ipv4地址 prefix-length 前缀长度 | 规定转换过程中的源IPv4地址池 |<br>| ipv6 nat v6v4 source {list | route-map} {acl列表名 | 地图名 | 地址池名}  | 配置动态NAT-NT映射 |</p>
<h3 id="NAPT-PT"><a href="#NAPT-PT" class="headerlink" title="NAPT-PT"></a>NAPT-PT</h3><p>(动态多对一)<br>NAPT-PT配置与动态NAT-PT转换类似，只需要在映射时添加overload参数即可。<br>|命令|功能|<br>|::|::|<br>| ipv6 nat v6v4 source {list | route-map} {acl列表名 | 地图名 | 地址池名} overload  | 配置NAPT-NT映射 |<br><strong>以上就是我对IPv6配置与部署的小小见解。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于从IPv4向IPv6过渡是大势所趋，因此就目前学习IPv6来说可谓明智之举。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络攻防" scheme="http://www.jb-hacker.top/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="网络技术" scheme="http://www.jb-hacker.top/tags/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>路由器的基本配置</title>
    <link href="http://www.jb-hacker.top/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE.html/"/>
    <id>http://www.jb-hacker.top/路由器的基本配置.html/</id>
    <published>2017-10-27T16:00:00.000Z</published>
    <updated>2018-01-07T05:02:12.383Z</updated>
    
    <content type="html"><![CDATA[<p>路由器是网络异种网络互联与多个子网互联的重要设备。简单来说，路由器可以将不同的局域网进行互联和通信。<br><a id="more"></a></p>
<h3 id="路由器疑点"><a href="#路由器疑点" class="headerlink" title="路由器疑点"></a>路由器疑点</h3><p>相比大家都路由器设备并不陌生，日常生活随处可见。<br>明明处于三层的路由器设备为何运用会比交换机普遍呢？<br>家庭日常使用的路由器为何需要连接不同子网呢？<br>当我们使用路由器上网时我们应当处于同一个局域网中？<br>这些疑惑笔者日后定会前来解答。</p>
<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><h5 id="配置IP地址"><a href="#配置IP地址" class="headerlink" title="配置IP地址"></a>配置IP地址</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Rouer&gt;enable</div><div class="line">Router#config t</div><div class="line">Router(config)#interface fastethernet0/1</div><div class="line">Router(config-if)#ip address 192.168.1.11 255.255.255.0</div><div class="line">Router(config-if)no shutdown</div><div class="line">Router(config-if)#end</div><div class="line">Router#show running-config</div></pre></td></tr></table></figure>
<h5 id="配置终端服务器"><a href="#配置终端服务器" class="headerlink" title="配置终端服务器"></a>配置终端服务器</h5><p>对于大型网络需要使用多个路由器和交换设备，如果对于每一个设备进行一一通过控制台端口配置是很麻烦的，所以产生终端服务器(路由器功能的一种)来实现用一台PC同时访问多个网络设备。<br>在此呢笔者不进行阐述了，无非是通过切换对每一个设备进行配置罢了。</p>
<h5 id="配置静态路由"><a href="#配置静态路由" class="headerlink" title="配置静态路由"></a>配置静态路由</h5><p>我们可以理解路由器不是直连的网络不能相互连通，但是我们可以人为的指定一条路径告诉路由器如何访问。<br>笔者疑惑的是静态路由是否只能间隔一个路由设备才能使用，由于实验的欠缺，在此立个flag。</p>
<h6 id="IPv4静态路由"><a href="#IPv4静态路由" class="headerlink" title="IPv4静态路由"></a>IPv4静态路由</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">R2#config t</div><div class="line">R2(config)#ip route 192.168.1.0 255.255.255.0 10.1.1.1</div><div class="line">R2(config)#end</div></pre></td></tr></table></figure>
<h6 id="IPv6静态路由"><a href="#IPv6静态路由" class="headerlink" title="IPv6静态路由"></a>IPv6静态路由</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">R2#config t</div><div class="line">R2(config)#ip 2005:CCCC::/64 Serial0/2/0</div><div class="line">R2(config)#end</div></pre></td></tr></table></figure>
<h3 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h3><p>我们仔细想想，为什么需要路由协议？无非是告诉路由器如何选择路由线路，因此产生了<code>距离矢量</code>、<code>链路状态</code>、<code>平衡混合</code>等选择方式的协议了。<br>原本根据路由选择协议的应用范围，可划分为内部网关协议、外部网关协议和核心网关协议(软考未涉及)三大类。</p>
<h4 id="内部网关协议"><a href="#内部网关协议" class="headerlink" title="内部网关协议"></a>内部网关协议</h4><p>我们可以理解在自治系统内部进行选择的路由协议。</p>
<h5 id="RIP协议"><a href="#RIP协议" class="headerlink" title="RIP协议"></a>RIP协议</h5><p>用跳数来作为唯一的度量值。</p>
<table><br>        <tr><br>            <th>命令</th><br>            <th>功能</th><br>        </tr><br>        <tr><br>            <th>router rip</th><br>            <th>指定使用RIP协议</th><br>        </tr><br>        <tr><br>            <th>network 网络地址</th><br>            <th>指定相连的网段</th><br>        </tr><br>        <tr><br>            <th>show ip route</th><br>            <th>查看路由表信息</th><br>        </tr><br>        <tr><br>            <th>show ip route igrp</th><br>            <th>查看IGRP协议的路由信息</th><br>        </tr><br></table>


<p>至于配置案例在此就不叙述了。</p>
<h5 id="IGRP协议"><a href="#IGRP协议" class="headerlink" title="IGRP协议"></a>IGRP协议</h5><p>与RIP协议配置不同的是，IGRP需要配置链路的带宽，毕竟带宽也是IGRP协议的度量值之一。</p>
<table><br>    <tr><br>        <th>命令</th><br>        <th>功能</th><br>    </tr><br>    <tr><br>        <th>route igrp 自治系统号</th><br>        <th>指定使用IGRP协议</th><br>    </tr><br>    <tr><br>        <th>network 网络地址</th><br>        <th>指定相连的网段</th><br>    </tr><br>    <tr><br>        <th>show ip route</th><br>        <th>查看路由表信息</th><br>    </tr><br>    <tr><br>        <th>show ip route igrp</th><br>        <th>查看IGRP协议的路由信息</th><br>    </tr><br></table>

<p>至于配置案例在此就不叙述了。<br>需要注意的是:使用IGRP协议，所涉及的路由器的自治系统号必须相同，否则彼此的路由信息将不被互相传递和学习。(自治系统号使用数字即可)</p>
<h5 id="OSPF协议"><a href="#OSPF协议" class="headerlink" title="OSPF协议"></a>OSPF协议</h5><p>通过链路状态(接口状态)来建立路由关系，适合大型网络使用。</p>
<p><table><br>    <tr><br>        <th>命令</th><br>        <th>功能</th><br>    </tr><br>    <tr><br>        <th>route ospf 进程ID</th><br>        <th>指定使用OSPF协议</th><br>    </tr><br>    <tr><br>        <th>network 网络地址 反掩码 area 区域号</th><br>        <th>指定相连的网段</th><br>    </tr><br>    <tr><br>        <th>show ip route</th><br>        <th>查看路由器信息</th><br>    </tr><br>    <tr><br>        <th>show ip route ospf</th><br>        <th>查看OSPF协议的路由信息</th><br>    </tr><br></table><br>至于配置案例在此就不叙述了。<br>需要注意的是:使用OSPF协议，每台路由器的OSPF所使用的进程号并不需要一致。(进程号使用数字即可)</p>
<h5 id="EIGRP协议"><a href="#EIGRP协议" class="headerlink" title="EIGRP协议"></a>EIGRP协议</h5><p>EIGRP是增强版的IGRP协议，它属于平衡混合协议。它的相关命令与IFGRP类似。(软考对于EIPGRP知识点涉及较少)</p>
<p><table><br>    <tr><br>        <th>命令</th><br>        <th>功能</th><br>    </tr><br>    <tr><br>        <th>router eigrp 自治系统号</th><br>        <th>指定使用OSPF协议</th><br>    </tr><br>    <tr><br>        <th>network 网络地址 [反掩码]</th><br>        <th>指定相连的网段</th><br>    </tr><br>    <tr><br>        <th>no auto-summay</th><br>        <th>关闭自动汇总功能</th><br>    </tr><br>    <tr><br>        <th>show ip route eigrp</th><br>        <th>查看EIGRP协议的路由信息</th><br>    </tr><br></table><br>至于配置案例在此就不叙述了。<br>需要注意的是:<br>    使用EIGRP协议，一般都需要关闭自动汇总功能。<br>    在这EIGRP使用的是反掩码，如果使用的是主网地址(A、B、C类的网络，就是掩码为8、16、24位的)可以省略反掩码。<br>(涉及反掩码的协议:OSPF、EIGRP、ACL)</p>
<h4 id="外部网关协议"><a href="#外部网关协议" class="headerlink" title="外部网关协议"></a>外部网关协议</h4><p>BGP:路径向量协议，在BGP路径选择信息中都带有AS号码的序列，它指出一个路由已通过的路径。<br>BGP把TCP当作它的传送协议，端口号179，这样就能给个保证它所有的传送是可靠的。<br>它本身是属于网路层协议。</p>
<p><strong>以上就是对路由器协议的小小见解。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;路由器是网络异种网络互联与多个子网互联的重要设备。简单来说，路由器可以将不同的局域网进行互联和通信。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络攻防" scheme="http://www.jb-hacker.top/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="网络技术" scheme="http://www.jb-hacker.top/tags/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>配置广域网接入</title>
    <link href="http://www.jb-hacker.top/%E9%85%8D%E7%BD%AE%E5%B9%BF%E5%9F%9F%E7%BD%91%E6%8E%A5%E5%85%A5.html/"/>
    <id>http://www.jb-hacker.top/配置广域网接入.html/</id>
    <published>2017-10-27T16:00:00.000Z</published>
    <updated>2018-01-07T05:02:41.125Z</updated>
    
    <content type="html"><![CDATA[<p>如果想访问其他远程网络，就必须是个广域网(WAN)接入服务了。<br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>WAN与LAN使用的连接方式和布线标准不大相同。广域网中路由器和交换机的连接方式主要有<code>串行连接</code>、<code>ISDN BRI</code>和<code>DSL</code>连接的。<br>这里主要介绍软考所涉及的<code>ISDN</code>、<code>PPP</code>和<code>DDR</code>、<code>帧中继</code>等相关配置。<br>(针对此配置笔者了解甚少，多看书中实例理解)</p>
<h2 id="配置ISDN"><a href="#配置ISDN" class="headerlink" title="配置ISDN"></a>配置ISDN</h2><p>相关配置命令</p>
<p><table><br>    <tr><br>        <th>命令</th><br>        <th>功能</th><br>    </tr><br></table><br>| 命令 | 功能 |<br>|:—–:|:—-:|<br>| isdn switch-type 交换机类型 | 设置交换机类型 |<br>| interface bri 0 | 接口BRI设置 |<br>| encapsulation ppp | 设置PPP封装 |<br>| dialer map protocol 下一跳地址 [name 域名] [broadcast] [拨号串] | 设置协议地址与电话号码的映射 |<br>| ppp multilink   |  启动PPP多连接 |<br>| dialer load-threshold <em>load</em> | 设置启动另一个B通道的阀值 |<br>| show isdn {active | history | memory | services | status [dsl | interface-type number] | }|显示ISDN的有关信息 |</p>
<p>摘抄书中部分配置信息:<br>配置R1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">R1(config)#isdn switch-tyoe basic-net3</div><div class="line">R1(config)#interface bri 0</div><div class="line">R1(config-if)#ip address 192.168.1.1 255.255.255.0</div><div class="line">R1(config-if)#encapsulation ppp</div><div class="line">R1(config-if)#dialer string 80000002</div><div class="line">R1(config-if)#dialer-group 1</div><div class="line">R1(config-if)#no shutdown exit</div><div class="line">R1(config)#exit</div><div class="line">R1(config)#dialer-list l protocol ip permit</div><div class="line">R1(config)#end</div><div class="line">R1#</div></pre></td></tr></table></figure></p>
<h2 id="PPP和DDR"><a href="#PPP和DDR" class="headerlink" title="PPP和DDR"></a>PPP和DDR</h2><p>PPP(点对点协议)、DDR(按需拨号路由)，DDR技术和PPP技术一样对于ISDN的配置是非常重要的，在实际应用中ISDN、PPP和DDR这三项技术经常综合使用。<br>(针对此配置笔者了解甚少，多看书中实例理解)<br>相关配置命令<br>| 命令 | 功能 |<br>|:—–:|:—-:|<br>| encapsulation ppp | 设置PPP封装 |<br>| ppp authentication {chap | chap pap | pap chap | pap} [if-needed] [list-name | default] [callin]| 设置认证方法 |<br>| username <em>name</em> password secret | 指定口令|<br>| clockrate speed | 设置DCE段线路速度|<br>| ppp multilink | 启动PPP多连接 |<br>| dialer load-thresold load| 设置启动另一个B通道的阀值|<br>| show isdn {active | history | memory | services | status [dsl | interface-type number] | }|显示ISDN的有关信息 |<br>摘抄书中部分配置信息:<br>配置R1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">username R2 password 0 cisco</div><div class="line">isdn switch-type basic-net3</div><div class="line">!</div><div class="line">encapsulation ppp</div><div class="line">dialer idle-timeout 300</div><div class="line">dialer map ip 192.168.1.2 name R2 broadcast 80000002</div><div class="line">dialer load-threshold 128</div><div class="line">dialer-group 1</div><div class="line">no cdp enable</div><div class="line">ppp authentication chap </div><div class="line">ppp multilink</div><div class="line">！</div><div class="line">ip route 10.1.2.0 255.255.255.0 192.168.1.2</div><div class="line">!</div><div class="line">dialer-list 1 protocol ip permit</div><div class="line">...</div><div class="line">end</div></pre></td></tr></table></figure></p>
<h2 id="配置帧中继"><a href="#配置帧中继" class="headerlink" title="配置帧中继"></a>配置帧中继</h2><p>帧中继是一种高性能的WAN协议，运行在物理层和数据链路层，它是X.25的简化版本。<br>至于帧中继为何重要，从历年的软考真题就能明白一二了。<br>帧中继的相关配置命令<br>| 命令 | 功能 |<br>|:—–:|:—-:|<br>| encapsulation frame-relay [ietf] | 设置Frame Relay封装 |<br>| frame-relay lmi-type {ansi |cisco | q9330a}| 设置Frame Relay LMI类型 |<br>| interface interface-type interface-number subinterface-number [ frame-relay map protocol protocol-address dlci [broadcast] | 映射协议地址与DLCI |<br>| frame-relay interface-dlci dlci [broadcast] | 设置FR DLCI编号|<br>摘抄书中部分配置信息:<br>配置R1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">encapsulation frame-relay (简写encap frame-reply)</div><div class="line">clockrate 64000</div><div class="line">frame-relay lmi-type cisco</div><div class="line">no frame-replay inverse-arp (关闭帧中继逆向ARP)</div></pre></td></tr></table></figure></p>
<p><strong>以上就是对广域网接入的小小见解。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果想访问其他远程网络，就必须是个广域网(WAN)接入服务了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络攻防" scheme="http://www.jb-hacker.top/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="网络技术" scheme="http://www.jb-hacker.top/tags/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>访问控制列表ACL</title>
    <link href="http://www.jb-hacker.top/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8ACL.html/"/>
    <id>http://www.jb-hacker.top/访问控制列表ACL.html/</id>
    <published>2017-10-27T16:00:00.000Z</published>
    <updated>2018-01-07T05:03:23.557Z</updated>
    
    <content type="html"><![CDATA[<p>为什么需要ACL，无非是进行访问控制罢了。这种技术从路由器逐步推广到交换机上进行使用。<br><a id="more"></a><br>ACL对入站或出站的通信进行过滤。ACL的局限性是不能对路由器本身发出的通信进行过滤，因此在路由器上执行ping或trace、route命令，或者通过路由器远程连接(telnet)另外一个网络设备，应用于路由器端口的ACL命令不能过滤这些通信。<br>ACL基本原则:</p>
<ul>
<li>先匹配原则</li>
<li>排序原则</li>
<li>默认丢弃原则<br>我们知道ACL分为标准ACL和扩展ACL。</li>
</ul>
<h2 id="标准ACL"><a href="#标准ACL" class="headerlink" title="标准ACL"></a>标准ACL</h2><p>标准编号范围:1~99,1300~1999。<br>命令格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Router(config)#access-list 编号 permit|deny 单个IP|&#123;网络地址 反掩码&#125;</div></pre></td></tr></table></figure></p>
<p>激活ACL命令(进入端口应用ACL)<br>in表示进入端口的分组(入站)，out表示端口输出的分组(出站)。<br>我们可以这样理解，在针对配置的设备来说，该端口经过该设备传送即为入站，反之端口远离该设备即为出站。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Router(config)#interface 端口号</div><div class="line">Router(config-if)#ip access-group acl编号 in|out</div></pre></td></tr></table></figure></p>
<p>通配符掩码的例子</p>
<table><br>        <tr><br>            <th>IP地址</th><br>            <th>通配符掩码</th><br>            <th>匹配</th><br>        </tr><br>        <tr><br>            <th>0.0.0.0</th><br>            <th>255.255.255.255</th><br>            <th>匹配任何地址(关键字any)</th><br>        </tr><br>        <tr><br>            <th>172.16.1.1</th><br>            <th>0.0.0.0    </th><br>            <th>匹配host 172.16.1.1(匹配单个主机)</th><br>        </tr><br>    </table>




<p>标准ACL默认配置<br><code>access-list 编号 deny any</code></p>
<h2 id="扩展ACL"><a href="#扩展ACL" class="headerlink" title="扩展ACL"></a>扩展ACL</h2><p>标准编号范围:1~99,1300~1999。<br>命令格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Router(config)#access-list 编号 permit|deny 协议类型 源网络地址 反掩码 [控制信息]目的地址 反掩码 [控制信息] [log]</div></pre></td></tr></table></figure></p>
<p>协议类型:tcp、udp、icmp、ip<br>对于TCP和UDP协议如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Router(config)#access-list 编号 permit|deny tcp|udp 源网络地址 反掩码 目的地址 反掩码 [操作符 端口|关键字] [established] [log]</div></pre></td></tr></table></figure></p>
<p>激活ACL命令同标准ACL一致<br>实例配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Router#conf t</div><div class="line">Router(config)#access-list 100 permit tcp any 172.16.0.0 0.0.255.255 established log</div><div class="line">Router(config)#access-list 100 permit udp host 172.16.1.1 eq dns log</div><div class="line">Router(config)#access-list 100 permit tcp 172.17.0.0 0.0.255.255 host 172.16.1.2 eq telnet log</div><div class="line">Router(config)#access-list 100 permit icmp any 172.16.0.0 0.255.255.255 echo-reply log</div><div class="line">Router(config)#access-list 100 deny ip any any log</div><div class="line">Router(config)#interface ethernet0</div><div class="line">Router(config-if)#ip access-group 100 in</div></pre></td></tr></table></figure></p>
<p>标准ACL默认配置<br><code>access-list 编号 deny ip any any</code></p>
<p><strong>以上就是我对ACL的小小见解。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么需要ACL，无非是进行访问控制罢了。这种技术从路由器逐步推广到交换机上进行使用。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络攻防" scheme="http://www.jb-hacker.top/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="网络技术" scheme="http://www.jb-hacker.top/tags/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>网络常用设备及介绍</title>
    <link href="http://www.jb-hacker.top/%E7%BD%91%E7%BB%9C%E5%B8%B8%E7%94%A8%E8%AE%BE%E5%A4%87%E5%8F%8A%E4%BB%8B%E7%BB%8D.html/"/>
    <id>http://www.jb-hacker.top/网络常用设备及介绍.html/</id>
    <published>2017-10-27T16:00:00.000Z</published>
    <updated>2018-01-07T05:02:27.122Z</updated>
    
    <content type="html"><![CDATA[<p>我们能够理解即使虚拟的网络也需要底层的物理设备作为承载！<br><a id="more"></a></p>
<h2 id="中继器"><a href="#中继器" class="headerlink" title="中继器"></a>中继器</h2><p>处于物理层的中继器，作用比较单一，对接收信号进行再生和发送。它不会解释和改变接收到的数字信息。<br>但是在以太网中中继器的数量是有限的，最多使用4个中继器，即5个网段，3个网段接PC，这就是<code>5-4-3规则</code>。</p>
<h2 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h2><p>即Hub，工作原理同中继器一致，简单来说是一个多端口中继器，它把一个端口上收到的数据广播发生到其他所有的端口上。</p>
<h2 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h2><p>工作与数据链路层，用于连接两个局域网段。它通过分析数据帧的地址字段，来决定是否把收到的帧转发给另一个网段。网桥用于局域网互联。</p>
<h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>多端口网桥，每一个端口都可以连接一个局域网。(二层交换机用于局域网互联)</p>
<h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>常用于广域网互联，通过逻辑地址(IP地址)转发网络间的信息，完成异构网络之间的互通互联。但是只能连接使用相同网络层协议的子网。</p>
<h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><p>工作于4-7层，是最复杂的网络互联设备了，用于连接网络上执行不同协议的子网。</p>
<p><strong>以上就是对网络设备的小小见解。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们能够理解即使虚拟的网络也需要底层的物理设备作为承载！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络攻防" scheme="http://www.jb-hacker.top/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="网络技术" scheme="http://www.jb-hacker.top/tags/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>交换机的基本配置</title>
    <link href="http://www.jb-hacker.top/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE.html/"/>
    <id>http://www.jb-hacker.top/交换机的基本配置.html/</id>
    <published>2017-10-27T16:00:00.000Z</published>
    <updated>2018-01-07T05:01:58.627Z</updated>
    
    <content type="html"><![CDATA[<p>什么是交换机？交换机的作用是什么？以及交换机的基本配置有哪些？这些是我需要思考的。(注意:我们这里所说的是二层交换机)<br><a id="more"></a><br>交换机是软考的必考点，但是理论看多了就有些迷茫，不明白底层的一些含义及想法。</p>
<h2 id="简介交换机"><a href="#简介交换机" class="headerlink" title="简介交换机"></a>简介交换机</h2><p>交换机也叫交换式集线器，作用和集线器大题相同。但是为何集线器远远没有交换机出名呢？<br>这源于它们俩的特性不同，集线器采用共享带宽，而交换机采用独占带宽。所以交换机能获得的带宽，至于原理笔者也不能理解。</p>
<h2 id="交换机作用"><a href="#交换机作用" class="headerlink" title="交换机作用"></a>交换机作用</h2><p>交换机的作用是用来连接局域网(LAN)内的多个节点，用于局域网内的数据交换，因此它主要运用于组建局域网使用。<br>交换机有许多接口，不同的接口可以连接不同的主机，因此我们可以轻易的理解到交换机使相应的主机处于同一个局域网中。</p>
<h2 id="交换机分类"><a href="#交换机分类" class="headerlink" title="交换机分类"></a>交换机分类</h2><p>按适用范围划分：接入层交换机、汇聚层交换机、核心层交换机</p>
<h2 id="常用配置命令"><a href="#常用配置命令" class="headerlink" title="常用配置命令"></a>常用配置命令</h2><h3 id="配置enable口令、密码和主机名"><a href="#配置enable口令、密码和主机名" class="headerlink" title="配置enable口令、密码和主机名"></a>配置enable口令、密码和主机名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Switch&gt;</div><div class="line">Switch&gt;enable   (简写en)</div><div class="line">Switch#config terminal</div><div class="line">Switch(config)#enable password cisco</div><div class="line">Switch(config)#enable secret cisco1</div><div class="line">Switch(config)#hostname C2950</div><div class="line">C2950(config)#end</div><div class="line">C2950#</div></pre></td></tr></table></figure>
<h3 id="配置IP地址、默认网关、域名和域名服务器"><a href="#配置IP地址、默认网关、域名和域名服务器" class="headerlink" title="配置IP地址、默认网关、域名和域名服务器"></a>配置IP地址、默认网关、域名和域名服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">C2950(config)#ip address 192.168.1.1 255.255.255.0</div><div class="line">C2950(config)#ip default-gatway 192.168.1.254</div><div class="line">C2950(config)#ip domain-name cisco.com</div><div class="line">C2950(config)#ip name-senver 200.0.0.1</div><div class="line">C2950(config)#end</div></pre></td></tr></table></figure>
<h3 id="配置端口属性"><a href="#配置端口属性" class="headerlink" title="配置端口属性"></a>配置端口属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">C2950(config)#interface fastethernet0/1     (简写int f0/1)</div><div class="line">C2950(config-if)#speed ?</div><div class="line">C2950(config-if)#speed 100</div><div class="line">C2950(config-if)#duplex ?</div><div class="line">C2950(config-if)#euplex full</div><div class="line">C2950(config-if)#description TO_PC1</div><div class="line">C2950(config-if)#^Z</div><div class="line">C2950#show interface fastethernet0/1</div><div class="line">C2950#show interface fastethernet0/1 status</div></pre></td></tr></table></figure>
<h3 id="配置和查看MAC地址表"><a href="#配置和查看MAC地址表" class="headerlink" title="配置和查看MAC地址表"></a>配置和查看MAC地址表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">C2950(config)#mac-address-table ?</div><div class="line">C2950(config)#mac-address-table aging-time 100</div><div class="line">C2950(config)#mac-address-table permanent 0000.0c01.bbcc f0/3</div><div class="line">C2950(config)#mac-address-table restricted static 0000.0c02.bbcc f0/3 f0/7</div><div class="line">C2950(config)#end</div><div class="line">C2950#show mac-address-table</div><div class="line">C2950#show mac-address-table restricted static</div></pre></td></tr></table></figure>
<h2 id="配置和管理VLAN"><a href="#配置和管理VLAN" class="headerlink" title="配置和管理VLAN"></a>配置和管理VLAN</h2><h3 id="什么是VLAN"><a href="#什么是VLAN" class="headerlink" title="什么是VLAN"></a>什么是VLAN</h3><p>VLAN是用于把物理上直接相连的网络从逻辑上划分为多个子网。交换机将主机连接在同一个局域网，如果主机过多就会不便于管理，尤其可能形成”广播风暴”之类的现象，如果我们可以将它们划分，那么它们就可以共享一个冲突域，而不是同享一个广播域了。(默认配置下，所有接口处于可用状态并且都属于VLAN1)</p>
<h3 id="VLAN的作用"><a href="#VLAN的作用" class="headerlink" title="VLAN的作用"></a>VLAN的作用</h3><p>VLAN划分了网络，那么它就可以对局域网里面的网络进行合理的管理了。对于区分用户主体、路径都是可以自由配置的。为了获得这些能力，我们不能不学习一些协议了，它们分别是<code>VTP</code>、<code>VLAN中继</code>和<code>VLAN配置</code>了。</p>
<h5 id="VLAN中继"><a href="#VLAN中继" class="headerlink" title="VLAN中继"></a>VLAN中继</h5><p>VLAN中继(VLAN Trunk)也称为VLAN主干，在交换机与交换机或交换机与路由器之间连接的端口上配置中继模式，使得属于不同的VLAN的数据库都可以通过这条中继链路进行传播。<br>这个很好理解，不同的VLAN始终是需要通信的，所有这个问题必须解决。但是笔者疑惑的是不同的VLAN之间原本要引入第三层交换技术才可以解决，VLAN处理数据帧那VLAN中继应该是第二次的协议，如何处理不同VLAN通信。</p>
<h5 id="VTP协议"><a href="#VTP协议" class="headerlink" title="VTP协议"></a>VTP协议</h5><p>VTP协议可以维护VLAN信息全网的一致性、VTP有三种工作模式，客户机模式client、服务器模式server、透明模式transparent，详细的差别点这里就不叙述了。</p>
<h6 id="配置2950A交换机为服务器模式"><a href="#配置2950A交换机为服务器模式" class="headerlink" title="配置2950A交换机为服务器模式"></a>配置2950A交换机为服务器模式</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">2950A#</div><div class="line">2950A#vlan database</div><div class="line">2950A#vtp ?</div><div class="line">2950A(vlan)#vtp server</div><div class="line">Setting device to VTP SERVER mode.</div><div class="line">2950A(vlan)#vtp domain vtpserver</div><div class="line">Changing VTP domain name from NULL to vtpserver.</div><div class="line">2950A(vlan)#vtp pruning</div><div class="line">Pruning switched ON</div><div class="line">2950A(vlan)#exit</div><div class="line">APPLY completed .Exiting...</div><div class="line">2950A#show vtp status</div></pre></td></tr></table></figure>
<h6 id="配置2950A交换机为客户机模式"><a href="#配置2950A交换机为客户机模式" class="headerlink" title="配置2950A交换机为客户机模式"></a>配置2950A交换机为客户机模式</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2950A#</div><div class="line">2950A#vlan database</div><div class="line">2950A(vlan)#vtp client</div><div class="line">Setting device to VTP CLIENT mode.</div><div class="line">2950A(vlan)#exit</div></pre></td></tr></table></figure>
<h6 id="配置VLAN-Trunk端口"><a href="#配置VLAN-Trunk端口" class="headerlink" title="配置VLAN Trunk端口"></a>配置VLAN Trunk端口</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Switch#config terminal</div><div class="line">Switch(config)#interface f0/24</div><div class="line">Switch(config-if)#switchport mode trunk</div><div class="line">Switch(config-if)#switchport trunk allow vlan all</div><div class="line">Switch(config-if)#exit</div><div class="line">Switch(config)#exit</div><div class="line">Switch#</div></pre></td></tr></table></figure>
<h3 id="配置VALN"><a href="#配置VALN" class="headerlink" title="配置VALN"></a>配置VALN</h3><h5 id="创建VLAN"><a href="#创建VLAN" class="headerlink" title="创建VLAN"></a>创建VLAN</h5><p>VLAN信息可以在服务器模式或透明模式交换机创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">2950A#</div><div class="line">2950A#vlan database</div><div class="line">2950A(vlan)#vlan 2</div><div class="line">VLAN 2 added:</div><div class="line">    Name:VLAN002</div><div class="line">2950A(vlan)#vlan 3 name vlan3</div><div class="line">VLAN 3 added:   Name vlan3</div><div class="line">2950A(vlan)#exit</div></pre></td></tr></table></figure></p>
<h5 id="将端口添加到某VLAN中"><a href="#将端口添加到某VLAN中" class="headerlink" title="将端口添加到某VLAN中"></a>将端口添加到某VLAN中</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Switch#config terminal</div><div class="line">Switch(config)#interface f0/9</div><div class="line">Switch(config-if)#switchport mode access</div><div class="line">Switch(config-if)#switchport access vlan2</div><div class="line">Switch(config-if)#exit</div><div class="line">Switch(config)#interface f0/10</div><div class="line">Switch(config-if)#switchport mode access</div><div class="line">Switch(config-if)#switchport access vlan3</div><div class="line">Switch(config-if)#exit</div><div class="line">Switch(config)#exit</div><div class="line">Switch#show vlan</div><div class="line">Switch#</div></pre></td></tr></table></figure>
<h2 id="生成树协议配置"><a href="#生成树协议配置" class="headerlink" title="生成树协议配置"></a>生成树协议配置</h2><h3 id="什么是生成树"><a href="#什么是生成树" class="headerlink" title="什么是生成树"></a>什么是生成树</h3><p>由于交换机之间需要冗余连接(当然这可以提高网络的可靠性)，因此对于数据帧的转发就可能存在网络环路的现象产生了(多个Trunk端口)，这种现象的产生对于网络往往是致命的，严重影响其他正常数据的传播。<br>因此我们可以通过一直规定告诉交换机哪个端口可以用于转发，哪些会被阻断。于是我们的<code>STP</code>登上了舞台。</p>
<h3 id="生成树配置"><a href="#生成树配置" class="headerlink" title="生成树配置"></a>生成树配置</h3><p>对于生成树我们可以根据<code>端口权值</code>和<code>路径值</code>实现负载均衡。</p>
<h5 id="端口权值-port-priority"><a href="#端口权值-port-priority" class="headerlink" title="端口权值(port-priority)"></a>端口权值(port-priority)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Switch#config terminal</div><div class="line">Switch(config)#interface f0/9</div><div class="line">Switch(config-if)#spanning-tree vlan 1 port-priority 10</div><div class="line">Switch(config-if)#spanning-tree vlan 2 port-priority 10</div><div class="line">Switch(config-if)#end</div><div class="line">Switch#copy running-config startup-config</div></pre></td></tr></table></figure>
<h5 id="路径值-cost"><a href="#路径值-cost" class="headerlink" title="路径值(cost)"></a>路径值(cost)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Switch#config terminal</div><div class="line">Switch(config)#interface f0/9</div><div class="line">Switch(config-if)#spanning-tree vlan 1 cost 30</div><div class="line">Switch(config-if)#spanning-tree vlan 1 cost 30</div><div class="line">Switch(config-if)#exit</div><div class="line">Switch#</div></pre></td></tr></table></figure>
<p><strong>以上就是对交换机配置的小小见解。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是交换机？交换机的作用是什么？以及交换机的基本配置有哪些？这些是我需要思考的。(注意:我们这里所说的是二层交换机)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络攻防" scheme="http://www.jb-hacker.top/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="网络技术" scheme="http://www.jb-hacker.top/tags/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>策略路由</title>
    <link href="http://www.jb-hacker.top/%E7%AD%96%E7%95%A5%E8%B7%AF%E7%94%B1.html/"/>
    <id>http://www.jb-hacker.top/策略路由.html/</id>
    <published>2017-10-27T16:00:00.000Z</published>
    <updated>2018-01-07T05:03:36.971Z</updated>
    
    <content type="html"><![CDATA[<p>在我认为策略路由是一种强化控制方式，就默认而言直接路由、静态路由、默认路由和各种动态协议所生成的路由条目，路由器远可以将数据分组从其源地址转发到目的地址。<br>但是人们的强权意识觉得这远远是不够的，因此策略路由(Policy Based Routing,PBR)就用来对分组的转发和路由的传播进行精准控制。<br><a id="more"></a><br>在此呢笔者仅仅介绍涉及路由映射表的命令。当然书中的实例对于理解大有帮助。</p>
<h2 id="1-route-map命令"><a href="#1-route-map命令" class="headerlink" title="1. route-map命令"></a>1. route-map命令</h2><p>创建一个路由映射表(定义路由图)</p>
<blockquote>
<p>route-map 映射表名称 [permit | deny] 路由映射表的序列号</p>
</blockquote>
<p>使用<code>no route-map 映射表名称 [permit | deny] 路由映射表的序列号</code>删除指定的路由映射表</p>
<h2 id="2-match命令"><a href="#2-match命令" class="headerlink" title="2. match命令"></a>2. match命令</h2><p>用于指定分组所需要匹配的条件(定义匹配条件)<br>1) match ip address</p>
<blockquote>
<p>match ip address {acl编号 | 名称}</p>
</blockquote>
<p>2) match length </p>
<blockquote>
<p>match length 最小长度 最大长度</p>
</blockquote>
<h2 id="3-set命令"><a href="#3-set命令" class="headerlink" title="3. set命令"></a>3. set命令</h2><p>指定对匹配的分组进行转发的方式和规则(定义转发规则)<br>1) set ip next-hop</p>
<blockquote>
<p>set ip next-hop 下一跳地址</p>
</blockquote>
<p>2) set interface</p>
<blockquote>
<p>set interface 指定接口</p>
</blockquote>
<p>3) set ip default next-hop</p>
<blockquote>
<p>set interface 默认下一跳转发地址</p>
</blockquote>
<p>4) set default interface</p>
<blockquote>
<p>set default interface 指定接口</p>
</blockquote>
<h2 id="4-在接口上应用策略路由命令"><a href="#4-在接口上应用策略路由命令" class="headerlink" title="4. 在接口上应用策略路由命令"></a>4. 在接口上应用策略路由命令</h2><p>(应用于接口上)<br>ip policy route-map</p>
<blockquote>
<p>ip policy route-map 映射表名称/标记</p>
</blockquote>
<p>对本地路由器产生的分组应用策略路由，需要使用:</p>
<blockquote>
<p>ip local policy route-map 映射表名称/标记</p>
</blockquote>
<h2 id="5-查看路由策略命令"><a href="#5-查看路由策略命令" class="headerlink" title="5. 查看路由策略命令"></a>5. 查看路由策略命令</h2><p>(验证策略路由)<br>1) show route-map</p>
<blockquote>
<p>show route-map [映射表名称 | all]</p>
</blockquote>
<p>2) show ip policy</p>
<blockquote>
<p>show ip policy 地图名称</p>
</blockquote>
<p>3) debug ip policy</p>
<blockquote>
<p>debug ip policy</p>
</blockquote>
<p>实例在此省略，详细见课本。</p>
<p><strong>以上就是对策略路由的小小见解。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我认为策略路由是一种强化控制方式，就默认而言直接路由、静态路由、默认路由和各种动态协议所生成的路由条目，路由器远可以将数据分组从其源地址转发到目的地址。&lt;br&gt;但是人们的强权意识觉得这远远是不够的，因此策略路由(Policy Based Routing,PBR)就用来对分组的转发和路由的传播进行精准控制。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络攻防" scheme="http://www.jb-hacker.top/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="网络技术" scheme="http://www.jb-hacker.top/tags/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>IPSec的相关配置</title>
    <link href="http://www.jb-hacker.top/IPSec%E7%9A%84%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE.html/"/>
    <id>http://www.jb-hacker.top/IPSec的相关配置.html/</id>
    <published>2017-10-27T16:00:00.000Z</published>
    <updated>2018-01-07T05:02:55.190Z</updated>
    
    <content type="html"><![CDATA[<p>我们能够理解IPSec(IP   Security)是用于增强IP网络的安全性，因此请务必重视它。同时历年的考点也说明了这一点。<br><a id="more"></a></p>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><h3 id="为IPSec做准备"><a href="#为IPSec做准备" class="headerlink" title="为IPSec做准备"></a>为IPSec做准备</h3><p>确定策略，选择方法。</p>
<h3 id="配置IKE"><a href="#配置IKE" class="headerlink" title="配置IKE"></a>配置IKE</h3><ol>
<li>用isakmp enable命令启动或关闭IKE。</li>
<li>用isakmp policy命令创建IKE策略。</li>
<li>用isakmp key命令和相关配置预共享密钥。</li>
<li>用show isakmp [policy]命令验证IKE的配置</li>
</ol>
<h3 id="配置IPSec"><a href="#配置IPSec" class="headerlink" title="配置IPSec"></a>配置IPSec</h3><ol>
<li>用access-list命令配置加密用访问控制列表。</li>
<li>用crypto ipsec transform-set命令配置交换集。</li>
<li>(任选)用crypto ipsec security-association lifetime明亮配置全局性的IPSec安全关联的生存期。</li>
<li>用crypto map命令配置加密图。</li>
<li>用interface命令和crypto map-name interface把配置应用到接口上。</li>
<li>用各种可用的show命令验证IPSec的配置。</li>
</ol>
<h3 id="测试和验证IPSec"><a href="#测试和验证IPSec" class="headerlink" title="测试和验证IPSec"></a>测试和验证IPSec</h3><p>使用show、debug和相关的命令测试和验证IPSec加密是否正常。</p>
<h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><p>总部端路由器部分配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">crypto isakmp policy 1</div><div class="line">authentication pre-share</div><div class="line">group 2</div><div class="line">crypto isakmp key test123 address 202.96.1.2</div><div class="line">crypto ipsec transform-set VPNtag ah-md5-hmac esp-des</div><div class="line">crypto map VPNdemo 10 ipsec-isakmp</div><div class="line">set peer 202.96.1.2</div><div class="line">set transform-set VPNtag</div><div class="line">match address 101</div><div class="line">interface Tunnel0</div><div class="line">ip address 68.1.1 255.255.255.0</div><div class="line">no ip directed-broadcast</div><div class="line">tunnel source 202.96.1.2</div><div class="line">crypto map VPNdemo</div><div class="line">ip route 0.0.0.0 0.0.0.0 202.96.1.2</div><div class="line">ip route 172.22.2.0 255.255.0.0 192.168.1.2</div><div class="line">access-list 101 permit gre host 202.96.1.1 host 202.96.1.2</div></pre></td></tr></table></figure></p>
<p>关注三对应：</p>
<ol>
<li>转换集名称5-8(VPNtag)</li>
<li>加密图名称6-15(VPNdemo)</li>
<li>ACL编号9-18(101)</li>
</ol>
<p><strong>以上就是对IPSec的小小见解。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们能够理解IPSec(IP   Security)是用于增强IP网络的安全性，因此请务必重视它。同时历年的考点也说明了这一点。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络攻防" scheme="http://www.jb-hacker.top/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="网络技术" scheme="http://www.jb-hacker.top/tags/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>C语言命令行参数</title>
    <link href="http://www.jb-hacker.top/C%E8%AF%AD%E8%A8%80%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0.html/"/>
    <id>http://www.jb-hacker.top/C语言命令行参数.html/</id>
    <published>2017-07-20T16:00:00.000Z</published>
    <updated>2018-01-07T05:01:44.954Z</updated>
    
    <content type="html"><![CDATA[<p>C语言的高级特性,如何利用main函数的两个参数。<br><a id="more"></a><br>读取程序运行的命令行参数。</p>
<h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>函数原型:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int main(int agrc,char * argv[])</div><div class="line">&#123;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>argc:代表启动程序时，命令行参数的格式。C/C++语言规定，可执行程序程序本身的文件名，也算一个命令行参数；因此，argc的值至少为1.<br>argv:指针数组，其中的每个元素都是一个char *类似的指针，该指针指向一个字符串，这个字符串里就存放着命令行参数。<br>例如，argv[0]指向的字符串就是第一个命令行参数，即可指向程序的文件名，argv[1]指向第二个命令行参数，argv[2]指向第三个命令行参数…….。</p>
<h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">int main(int argc,char * argv[])</div><div class="line">&#123;</div><div class="line">    for(int i = 0;i &lt; argc;i++)</div><div class="line">        printf(&quot;%s\n&quot;,argv[i]);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将上面的程序编译成sample.exe,然后在控制套窗口敲:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sample para1 para2 s.txt 5 &quot;hello world&quot;</div></pre></td></tr></table></figure></p>
<p><strong>完成coursera里面的课程设计，我想这既是机遇又是挑战</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言的高级特性,如何利用main函数的两个参数。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C语言" scheme="http://www.jb-hacker.top/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言函数指针</title>
    <link href="http://www.jb-hacker.top/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88.html/"/>
    <id>http://www.jb-hacker.top/C语言函数指针.html/</id>
    <published>2017-07-20T16:00:00.000Z</published>
    <updated>2018-01-07T05:01:31.427Z</updated>
    
    <content type="html"><![CDATA[<p>C语言的高级特性,关于指针的用法我想是不是应该认真了解下哦！<br><a id="more"></a><br>指针是C语言的灵魂。</p>
<h3 id="函数指针定义形式"><a href="#函数指针定义形式" class="headerlink" title="函数指针定义形式"></a>函数指针定义形式</h3><p>定义形式:<br>类型名 (* 指针变量名)(参数类型1，参数类型2，…);<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int (*pf)(int,char);</div></pre></td></tr></table></figure></p>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>可以用一个原型匹配的函数的名字给一个函数指针赋值。<br>要通过函数指针调用它所指向的函数，写法为:<br>函数指针名(实参表);</p>
<h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">void PrintMin(int a,int b)</div><div class="line">&#123;</div><div class="line">    if(a&lt;b)</div><div class="line">        printf(&quot;%d&quot;,a);</div><div class="line">    else</div><div class="line">        printf(&quot;%d&quot;,b);</div><div class="line">&#125;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    void (* pf)(int, int);</div><div class="line">    int x = 4,y = 5;</div><div class="line">    pf = PrintMin;</div><div class="line">    pf(x,y);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数指针和qsort库函数"><a href="#函数指针和qsort库函数" class="headerlink" title="函数指针和qsort库函数"></a>函数指针和qsort库函数</h3><p>C语言快速排序库函数:<br>void qsort(void <em>base,int nelem,unsigned int width,int( </em> pfCompare)(const void <em>,const void </em>));<br>可以对任意类型的数组进行排序<br>base:待排序数组的起始地址；<br>nelem:待排序数组的元素个数；<br>width:待排序数组的每个元素的大小(以字节为单位);<br>pfCompare:比较函数的地址</p>
<p>注意:pfCompare需要自己编写<br>格式:int 函数名(const void <em> elem1,const void </em> elem2);</p>
<p>排序就是一个不断比较并交换位置的过程。<br>比较函数编写规则:</p>
<ul>
<li>如果<em> elem1应该排在 </em> elem2前面，则函数返回值是负整数</li>
<li>如果<em> elem1和 </em> elem2哪个排在前面都行，则函数返回0</li>
<li>如果<em> elem1应该排在 </em> elem2后面，则函数返回值是正整数</li>
</ul>
<h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><p>调用qsort库函数，将一个unsigned int数组按照个位数从小到大进行排序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">#include&lt;stdlib.h&gt;</div><div class="line">int MyCompare(const void * elem1,const void *elem2)</div><div class="line">&#123;</div><div class="line">    unsigned int * p1,* p2;</div><div class="line">    p1 = (unsigned int *)elem1;//强制类型转换，&quot;elem1&quot;非法</div><div class="line">    p2 = (unsigned int *)elem2;//&quot;elem2&quot;非法</div><div class="line">    return (*p1 % 10) - (*p2 % 10);</div><div class="line">&#125;</div><div class="line">#define NUM 5</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    unsigned int an[NUM] = &#123;8,123,11,10,4&#125;;</div><div class="line">    qsort(an,NUM,sizeof(unsigned int),MyCompare);</div><div class="line">    for(int i = 0;i &lt; NUM;i++)</div><div class="line">        printf(&quot;%d&quot;,an[i]);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">10 11 123 4 8</div></pre></td></tr></table></figure></p>
<p><strong>完成coursera里面的课程设计，我想这既是机遇又是挑战</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言的高级特性,关于指针的用法我想是不是应该认真了解下哦！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C语言" scheme="http://www.jb-hacker.top/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>将python转换成可执行程序exe</title>
    <link href="http://www.jb-hacker.top/%E5%B0%86python%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8Fexe.html/"/>
    <id>http://www.jb-hacker.top/将python转换成可执行程序exe.html/</id>
    <published>2017-07-07T16:00:00.000Z</published>
    <updated>2018-01-07T05:01:16.965Z</updated>
    
    <content type="html"><![CDATA[<p>python脚本很方便简洁，但是推广可能还是exe文件有市场吧！<br><a id="more"></a><br>学过很多解释性语言都有一种感觉，那就是快捷上手。给人感觉不错，但是还是对图形化程序念念不忘。</p>
<h3 id="python脚本如何转为可执行程序"><a href="#python脚本如何转为可执行程序" class="headerlink" title="python脚本如何转为可执行程序"></a>python脚本如何转为可执行程序</h3><p>对于python脚本转换成有三个有名的程序:py2exe,pyinstaller(推荐),cxfreeze。</p>
<h4 id="py2exe"><a href="#py2exe" class="headerlink" title="py2exe"></a>py2exe</h4><p>在windows下安装py2exe，直接使用pip即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install py2exe</div></pre></td></tr></table></figure></p>
<p>然后在python文件前面写上注释:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># python file to exe in window</div><div class="line"># py2exe.py</div></pre></td></tr></table></figure></p>
<p>只要执行命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python py2exe.py py 文件名</div></pre></td></tr></table></figure></p>
<h4 id="pyinstaller-推荐"><a href="#pyinstaller-推荐" class="headerlink" title="pyinstaller(推荐)"></a>pyinstaller(推荐)</h4><p>网上对于pyinstaller的看法比py2exe的看法好多了，没办法我想肯定有它的道理。<br><a href="http://www.pyinstaller.org/" target="_blank" rel="external">官网</a><br>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pyinstaller</div></pre></td></tr></table></figure></p>
<p>转换成exe<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyinstaller python脚本文件名</div></pre></td></tr></table></figure></p>
<p>然后生成的文件里面就有可执行文件了。<br>文件夹路径在:<code>/dist/文件名/文件名.exe</code><br>注意:这种转换需要dll以及其他文件依赖，当然我们还是可以转换成一个独立的exe文件的。<br>加上一个参数<code>-F</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyinstaller -F python脚本文件名</div></pre></td></tr></table></figure>
<p>这样文件夹里面就只有单独的可执行文件了。</p>
<h4 id="cxfreeze"><a href="#cxfreeze" class="headerlink" title="cxfreeze"></a>cxfreeze</h4><p>对于这个网上并没有太多描述，我想还是专注pyinstaller就可以了。<br><a href="http://cx-freeze.readthedocs.io/en/latest/index.html" target="_blank" rel="external">官网</a></p>
<p><strong>我想先熟练某一种就是最好的吧！当然学习python常用模块刻不容缓</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python脚本很方便简洁，但是推广可能还是exe文件有市场吧！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.jb-hacker.top/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>linux命令简单操作</title>
    <link href="http://www.jb-hacker.top/linux%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C.html/"/>
    <id>http://www.jb-hacker.top/linux命令简单操作.html/</id>
    <published>2017-07-06T16:00:00.000Z</published>
    <updated>2018-01-07T05:00:39.645Z</updated>
    
    <content type="html"><![CDATA[<p>用户知道自己想要什么，也明白自己在做什么，并且会为自己的行为负责。<br><a id="more"></a><br>很多时候我也不知道为什么我需要学习linux，但是我知道学习linux也将会改变我对操作系统原有的一些想法和操作吧。</p>
<h3 id="赋予文件夹所有权限"><a href="#赋予文件夹所有权限" class="headerlink" title="赋予文件夹所有权限"></a>赋予文件夹所有权限</h3><p>此文件夹及以下的所有子目录和文件权限都会变为777，及任何权限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod R 777 /文件夹名</div></pre></td></tr></table></figure></p>
<h3 id="新建文本"><a href="#新建文本" class="headerlink" title="新建文本"></a>新建文本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi 文件名(可包括文件路径和后缀)</div></pre></td></tr></table></figure>
<h3 id="删除文件或文件夹"><a href="#删除文件或文件夹" class="headerlink" title="删除文件或文件夹"></a>删除文件或文件夹</h3><ul>
<li>删除home目录下的test目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf /home/test       #推荐使用，方便快捷</div></pre></td></tr></table></figure>
</li>
</ul>
<p>f是不提示用户，删除目录下的所有文件。请注意检查路径，输成别的目录就悲剧了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm /home/test</div></pre></td></tr></table></figure>
<p>这种不带参数的删除方法经常会提示无法删除，因为权限不够。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -r /home/test</div></pre></td></tr></table></figure>
<p>-r是递归的删除参数表中的目录及其子目录。 目录将被清空并且删除。 当删除目录包含的具有写保护的文件时用户通常是被提示的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -ir /home/test</div></pre></td></tr></table></figure>
<p>-i是交互模式。使用这个选项，rm命令在删除任何文件前提示用户确认。</p>
<p><strong>后期可以补上一些个人常用操作</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用户知道自己想要什么，也明白自己在做什么，并且会为自己的行为负责。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.jb-hacker.top/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://www.jb-hacker.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>使用正则表达式完成文本替换</title>
    <link href="http://www.jb-hacker.top/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AE%8C%E6%88%90%E6%96%87%E6%9C%AC%E6%9B%BF%E6%8D%A2.html/"/>
    <id>http://www.jb-hacker.top/使用正则表达式完成文本替换.html/</id>
    <published>2017-06-12T16:00:00.000Z</published>
    <updated>2018-01-07T05:00:21.410Z</updated>
    
    <content type="html"><![CDATA[<p>之前对vim和正则都存在着一些歪理，认为并不需要如此复杂吧!但是真正需要用到的时候，它们起了很大的作用。<br><a id="more"></a></p>
<blockquote>
<p>在我眼里，没有比正则更难理解的”语言”了。</p>
</blockquote>
<p>其实在所有计算机语言里，汇编也不过尔尔，当你想起你之前写的正则表达式时，你可能会一脸懵逼。当然我还是希望尝试一下的。</p>
<p>对于正则，一直神往，并没有认真去学习多少，大概懂得它的强悍之处。我发现我必须做些什么了。</p>
<p>如何替换html里面的a标签的链接为空呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;li&gt;&lt;a href=&quot;//www.runoob.com/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/html/html-tutorial.html&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/css/css-tutorial.html&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/js/js-tutorial.html&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/jquery/jquery-tutorial.html&quot;&gt;jQuery&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/bootstrap/bootstrap-tutorial.html&quot;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/sql/sql-tutorial.html&quot;&gt;SQL&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/mysql/mysql-tutorial.html&quot;&gt;MySQL&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/php/php-tutorial.html&quot;&gt;PHP&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/python/python-tutorial.html&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/cprogramming/c-tutorial.html&quot;&gt;C&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/cplusplus/cpp-tutorial.html&quot;&gt;C++&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/csharp/csharp-tutorial.html&quot;&gt;C#&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/java/java-tutorial.html&quot;&gt;Java&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/ruby/ruby-tutorial.html&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;</div></pre></td></tr></table></figure>
<p>就比如上方的代码而言吧，我想将所有的链接地址为空连接，如果我一个个改的话，肯定特别浪费时间，但是批量操作又没有特点。</p>
<p>最终我知道正则替换方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Find What:&lt;a href=&quot;.*?&quot;&gt;</div><div class="line">Replace With:&lt;a href=&quot;#&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>替换后:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;jQuery&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;SQL&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;MySQL&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;PHP&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;C&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;C++&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;C#&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Java&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;</div></pre></td></tr></table></figure></p>
<p>没有太明白为啥需要”.*“加一个小数点呢？这个问题可以研究一下，而”?”可以被省略。所以算是别人对于我正则入门的一个小小的建议吧！<br>对于”*”和”?”日常生活中用的也算比较多吧。</p>
<p>因此可以这么说，正则走起！</p>
<p><strong>以上就是我对正则的小小尝试吧。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前对vim和正则都存在着一些歪理，认为并不需要如此复杂吧!但是真正需要用到的时候，它们起了很大的作用。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习书籍名单</title>
    <link href="http://www.jb-hacker.top/%E5%AD%A6%E4%B9%A0%E4%B9%A6%E7%B1%8D%E5%90%8D%E5%8D%95.html/"/>
    <id>http://www.jb-hacker.top/学习书籍名单.html/</id>
    <published>2017-06-11T16:00:00.000Z</published>
    <updated>2018-01-07T05:00:57.797Z</updated>
    
    <content type="html"><![CDATA[<p>书籍是人类进行的阶梯。<br><a id="more"></a><br>也许看过一些书，或者有时候希望看某些书。我觉得我完全可以将这些书找到并且可以附带下载地址。空闲的时候为什么不试试呢？</p>
<h3 id="书籍名单"><a href="#书籍名单" class="headerlink" title="书籍名单"></a>书籍名单</h3><p>《白帽子讲web安全》<br>《web前端黑客技术揭秘》<br>《黑客攻防宝典：web实战篇》<br>《暗战亮剑:黑客渗透于防御全程实录》<br>《backtrack从入门到精通》<br>《黑客攻防技术与案例剖析》<br>《黑客攻防技术与案例剖析》<br>《黑客大曝光第6版》<br>《黑客攻防技术宝典-WEB实战篇》<br>《黑客攻防技术宝典系统实战篇》<br>《黑客WEB脚本攻击与防御技术核心剖析》<br>《黑客渗透笔记完整版》<br>《Q版缓冲区溢出教程》<br>《php漏洞挖掘书籍》<br>《Shellcoder编程揭秘》<br>《黑客防线2009缓冲区溢出攻击与防范专辑》<br>《黑客大曝光：无线网络安全（原书第2版）》<br>《LINUX黑客大曝光（第2版）》<br>《0day安全软件漏洞分析技术》（第一版和第二版）<br>《Binary+Hacks+黑客秘笈100选》<br>《Windows黑客技术揭秘与攻防1C语言篇》<br>《黑武器-linux_BT4无线黑客》<br>《黑客入侵网页攻防修炼》<br>《backtrack4:assuring security by penetration testing》<br>《Web应用安全威胁于防治（基于owasp top 与esapi）<br>《backtrack4:利用渗透测试保证系统安全》<br>《无线网络黑客攻防》<br>《Metasploit渗透测试指南》<br>《网络安全进阶笔记》<br>《Linux网络安全技术与实现(第2版)》<br>《网络安全 王淑江、 等 机械工业出版社 (2007-09出版)》<br>《Web系统安全和渗透性测试基础》<br>《渗透测试实践指南:必知必会的工具与方法》<br>《大中型网络入侵要案直击与防御》<br>《Web安全测试》<br>《Python灰帽子:黑客与逆向工程师的Python编程之道》<br>《SQL Injection Attacks and Defense（SQL注入攻击和防御）》</p>
<p>《SQL Injection Attacks and Possible Remedies（SQL注入攻击和可能的补救措施）》</p>
<p>《SQL: PL-SQL, Transact-SQL, SQL Injection, Database Console Commands, Xleratordb, Foreign Key, Navicat, Cursor,…》</p>
<p>《CEH Certified Ethical Hacker Study Guide [With CDROM]（国家认证的道德黑客学习指南(光盘)》</p>
<p>《The Shellcoder’s Handbook: Discovering and Exploiting Security Holes(这个Shellcoder手册:发现和利用安全漏洞）》</p>
<p>《Sockets, Shellcode, Porting and Coding: Reverse Engineering Exploits and Tool Coding for Security Professionals…（套接字,Shellcode,移植和编码:逆向工程利用和工具编码为安全专家……)》</p>
<p>《Metasploit Toolkit for Penetration Testing, Exploit Development, and Vulnerability Research（Metasploit工具包对渗透测试,利用开发和脆弱性研究)》</p>
<p>《Buffer Overflow Attacks: Detect, Exploit, Prevent（缓冲区溢出攻击:检测,利用,防止）》</p>
<p><strong>后期需要修改一下想看的书或笔记哦！</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;书籍是人类进行的阶梯。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用JS压缩用户上传图片</title>
    <link href="http://www.jb-hacker.top/%E4%BD%BF%E7%94%A8JS%E5%8E%8B%E7%BC%A9%E7%94%A8%E6%88%B7%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87.html/"/>
    <id>http://www.jb-hacker.top/使用JS压缩用户上传图片.html/</id>
    <published>2017-05-27T16:00:00.000Z</published>
    <updated>2018-01-07T04:59:50.409Z</updated>
    
    <content type="html"><![CDATA[<p>虽然在”软件测试”部也就是”智慧校园”呆了很久，但我知道这并不是我想要的。无奈厚着脸皮接受一个小小的考验。<br><a id="more"></a><br>说实话，我相信<code>勇敢</code>总是有用的。这不又能学习新的知识了。虽然在某些方面。。。<br>而且证实了一点，公司大神就是多啊！<br><a href="http://blog.csdn.net/iefreer/article/details/53039848?locationNum=7&amp;fps=1" target="_blank" rel="external">代码Demo参考</a><br>对于图片压缩就我个人而言只是概念性问题。当然知识点就在那。</p>
<ul>
<li>源代码分析</li>
<li>HTML5的FileReader接口</li>
<li>canvas drawImage接口</li>
<li>toDataUrl接口转换base64编码</li>
<li>PHP将base64转换成图片</li>
<li>个人注意的点点滴滴</li>
</ul>
<h4 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h4><p>先贴上源代码，其他的不多说:</p>
<blockquote>
<p>index.html:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</div><div class="line">    &lt;title&gt;图片压缩&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">input &#123;</div><div class="line">    margin: 10px 0;</div><div class="line">&#125;</div><div class="line">textarea &#123;</div><div class="line">    width: 100%;</div><div class="line">    height: 300px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/style&gt;</div><div class="line">&lt;body&gt;</div><div class="line"> &lt;!-- 这里不使用enctype=&quot;multipart/form-data&quot;的含义是禁止文件上传成功--&gt;</div><div class="line">    &lt;form id=&quot;myForm&quot; action=&quot;__URL__/addChk&quot; method=&quot;post&quot;&gt;</div><div class="line">        &lt;input type=&quot;file&quot; value=&quot;image&quot; id=&quot;img_input&quot;  name=&quot;image&quot; /&gt;</div><div class="line">        &lt;textarea id=&quot;result&quot;&gt;&lt;/textarea&gt;</div><div class="line">        &lt;p id=&quot;img_area&quot;&gt;&lt;/p&gt;</div><div class="line">        &lt;input type=&quot;hidden&quot;  name=&quot;&quot;&gt;</div><div class="line"></div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;上传&quot; onclick=&quot;replace()&quot;&gt;</div><div class="line"> &lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line">&lt;!--JS部分--&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var input = document.getElementById(&quot;img_input&quot;);</div><div class="line">    var result = document.getElementById(&quot;result&quot;);</div><div class="line">    var img_area = document.getElementById(&quot;img_area&quot;);</div><div class="line">    window.onload = function() &#123;</div><div class="line">//检测浏览器是否支持FileReader对象</div><div class="line">    if (typeof(FileReader) === &apos;undefined&apos;) &#123;</div><div class="line">        result.innerHTML = &quot;FileReader is not supported...&quot;;</div><div class="line">        input.setAttribute(&apos;disabled&apos;, &apos;disabled&apos;);</div><div class="line">    &#125; else &#123;</div><div class="line">        input.addEventListener(&apos;change&apos;, readFile, false);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">//借鉴地址:http://www.th7.cn/web/html-css/201407/48937.shtml</div><div class="line">function readFile() &#123;</div><div class="line">    var file = this.files[0];</div><div class="line">    if (!/image\/\w+/.test(file.type)) &#123;</div><div class="line">        alert(&quot;image only please.&quot;);</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    var reader = new FileReader();//读取用户上传的图片</div><div class="line">    reader.readAsDataURL(file);//readAsDataURL可以获取API异步读取文件数据另存为数据URL;将该URL绑定到img标签的src属性上，可以实现图片上传预览</div><div class="line">    reader.onload = function(e) &#123;</div><div class="line">        var img = new Image,</div><div class="line">            width = 640, //图像调整</div><div class="line">            quality = 0.7, //图片质量</div><div class="line">            canvas = document.createElement(&quot;canvas&quot;),</div><div class="line">            drawer = canvas.getContext(&quot;2d&quot;);</div><div class="line">            img.src = this.result;//这句不好理解</div><div class="line">            console.log(this.result);</div><div class="line">        img.onload = function() &#123;</div><div class="line">            canvas.width = width;</div><div class="line">            canvas.height = width * (img.height / img.width);</div><div class="line">            drawer.drawImage(img, 0, 0, canvas.width, canvas.height);//使用canvas drawInmage接口绘制canvas 2d中</div><div class="line">            img.src = canvas.toDataURL(&quot;image/jpeg&quot;, quality);//toDataUrl接口把图片转成base64编码字符串</div><div class="line">            console.log(img.src);</div><div class="line">            result.innerHTML = &apos;&lt;img src=&quot;&apos; + &quot;data:image/png;base64,&quot;+img.src + &apos;&quot; alt=&quot;&quot;/&gt;&apos;;</div><div class="line">            img_area.innerHTML = &apos;&lt;div class=&quot;sitetip&quot;&gt;preview：&lt;/div&gt;&lt;img src=&quot;&apos; + img.src + &apos;&quot; alt=&quot;&quot; id=&quot;generate&quot; value=&quot;generate&quot; /&gt;&lt;input type=&quot;hidden&quot; id=&quot;hide&quot; name=&quot;hide&quot; value=&quot;&apos;+ img.src+&apos;&quot; /&gt;&apos;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function replace()&#123;</div><div class="line">     document.getElementById(&apos;myForm&apos;).submit();</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;!--JS部分--&gt;</div></pre></td></tr></table></figure></p>
<p>view.html:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;show&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">恭喜你上传成功!&lt;br/&gt;</div><div class="line">图片预览:&lt;br/&gt;</div><div class="line">&lt;img src=&quot;__ROOT__/&#123;$path&#125;&quot;&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>php:<br>注意:这里使用的是thinkphp3.2.3，为啥用框架呢，方便开发<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">namespace Home\Controller;</div><div class="line">use Think\Controller;</div><div class="line"></div><div class="line">class IndexController extends Controller &#123;</div><div class="line">    public function index()&#123;</div><div class="line">        $this-&gt;display();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public function addChk()&#123;</div><div class="line">        $base_img =I(&apos;post.hide&apos;);</div><div class="line">//$base_img是获取到前端传递的src里面的值，也就是我们的数据流文件,哎：注意base64编码的头部部分</div><div class="line">          $base_img = str_replace(&apos;data:image/jpeg;base64,&apos;, &apos;&apos;, $base_img);</div><div class="line">//  设置文件路径和文件前缀名称</div><div class="line">        $path = &quot;./&quot;;</div><div class="line">        $prefix=&apos;nx_&apos;;</div><div class="line">        $output_file = $prefix.time().rand(100,999).&apos;.jpg&apos;;</div><div class="line">        $path = $path.$output_file;</div><div class="line">//这句代码前加上清除输出，防止文件写入错误</div><div class="line">     ob_clean();</div><div class="line">//创建将数据流文件写入我们创建的文件内容中</div><div class="line">        $ifp = fopen( $path, &quot;wb&quot; );</div><div class="line">        fwrite( $ifp, base64_decode( $base_img) );</div><div class="line">        $this-&gt;assign(&apos;path&apos;,$path);</div><div class="line">        $this-&gt;assign(&apos;filename&apos;,$output_file);</div><div class="line">        $this-&gt;display(&apos;show&apos;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="HTML5的FileReader接口"><a href="#HTML5的FileReader接口" class="headerlink" title="HTML5的FileReader接口"></a>HTML5的FileReader接口</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="external">借鉴</a><br>FileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。<br>当然那么多API我才不想多说，只要能看懂代码，其他有空再说。</p>
<h4 id="canvas-drawImage接口"><a href="#canvas-drawImage接口" class="headerlink" title="canvas drawImage接口"></a>canvas drawImage接口</h4><p><a href="http://www.w3school.com.cn/tags/canvas_drawimage.asp" target="_blank" rel="external">借鉴</a><br>drawImage() 方法在画布上绘制图像、画布或视频。<br>drawImage() 方法也能够绘制图像的某些部分，以及/或者增加或减少图像的尺寸。当然我还是不细说。</p>
<h4 id="toDataUrl接口转换base64编码"><a href="#toDataUrl接口转换base64编码" class="headerlink" title="toDataUrl接口转换base64编码"></a>toDataUrl接口转换base64编码</h4><p><a href="http://www.jianshu.com/p/17d7e5ddf10a" target="_blank" rel="external">借鉴</a><br>怎么理解呢？toDataUrl接口可以将图片转换成base64编码。也就是将图片转换成字符。</p>
<h4 id="PHP将base64编码转换成图片"><a href="#PHP将base64编码转换成图片" class="headerlink" title="PHP将base64编码转换成图片"></a>PHP将base64编码转换成图片</h4><p><a href="http://www.cnblogs.com/qqblog/p/6513880.html" target="_blank" rel="external">借鉴</a><br>PHP内置的base64_decode方法可以将base64编码转换成图片，这一特性很大程度上对我们图片进行上传有了很大帮助。</p>
<h4 id="个人注意的点点滴滴"><a href="#个人注意的点点滴滴" class="headerlink" title="个人注意的点点滴滴"></a>个人注意的点点滴滴</h4><p>就个人而言，需注意以下几点:</p>
<h5 id="上传文件大小限制"><a href="#上传文件大小限制" class="headerlink" title="上传文件大小限制"></a>上传文件大小限制</h5><p>PHP默认对上传文件有很多限制，比入上传的文件大小必须小于2M，当然我们可以进行一些设置的修改:<br>打开php.ini，首先找到<br><code>file_uploads = on;</code>是否允许通过HTTP上传文件的开关。默认为ON即是开<br><code>upload_tmp_dir;</code>文件上传至服务器上存储临时文件的地方，如果没指定就会用系统默认的临时文件夹<br><code>upload_max_filesize = 8m;</code>望文生意，即允许上传文件大小的最大值。默认为2M<br><code>post_max_size = 8m ;</code>指通过表单POST给PHP的所能接收的最大值，包括表单里的所有值。默认为8M<br>一般地，设置好上述四个参数后，上传&lt;=8M的文件是不成问题，在网络正常的情况下。<br>但如果要上传&gt;8M的大体积文件，只设置上述四项还一定能行的通。</p>
<p>进一步配置以下的参数<br><code>max_execution_time = 600;</code>每个PHP页面运行的最大时间值(秒)，默认30秒<br><code>max_input_time = 600 ;</code>每个PHP页面接收数据所需的最大时间，默认60秒<br><code>memory_limit = 8m ;</code>每个PHP页面所吃掉的最大内存，默认8M<br>把上述参数修改后，在网络所允许的正常情况下，就可以上传大体积文件了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">max_execution_time = 600</div><div class="line">max_input_time = 600</div><div class="line">memory_limit = 32m</div><div class="line">file_uploads = on</div><div class="line">upload_tmp_dir = /tmp</div><div class="line">upload_max_filesize = 32m</div><div class="line">post_max_size = 32m</div></pre></td></tr></table></figure></p>
<p>进行了这些设置后，上传大文件再也不用愁了。</p>
<h5 id="除去base64编码的默认头部"><a href="#除去base64编码的默认头部" class="headerlink" title="除去base64编码的默认头部"></a>除去base64编码的默认头部</h5><p>记得想保存图片的时候，记得除去base64编码里面的图片头部，当然还需要在意的是:细节很重要<br><code>data:image/jpeg;base64,</code>和<code>data:image/jpg;base64,</code>一个字母弄了多久，你自己知道就好了。无论如何，好好学习技术肯定没错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$base_img = str_replace(&apos;data:image/jpeg;base64,&apos;, &apos;&apos;, $base_img);</div></pre></td></tr></table></figure></p>
<p>结果:成效还是很明显的，将4747KB的图片压缩成了114KB，大大减少了对服务器端上传的压力。<br><strong>以上就是对图片压缩的小小见解。当然得知公司还是人才不少的。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然在”软件测试”部也就是”智慧校园”呆了很久，但我知道这并不是我想要的。无奈厚着脸皮接受一个小小的考验。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.jb-hacker.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.jb-hacker.top/tags/JavaScript/"/>
    
  </entry>
  
</feed>
