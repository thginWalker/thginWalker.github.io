<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小小博客</title>
  <subtitle>每天进步一点点。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jb-hacker.top/"/>
  <updated>2017-05-13T09:40:29.930Z</updated>
  <id>http://www.jb-hacker.top/</id>
  
  <author>
    <name>夜行者</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql常用命令简介</title>
    <link href="http://www.jb-hacker.top/4.html/"/>
    <id>http://www.jb-hacker.top/4.html/</id>
    <published>2017-05-12T16:00:00.000Z</published>
    <updated>2017-05-13T09:40:29.930Z</updated>
    
    <content type="html"><![CDATA[<p>mysql是一个关系型数据库管理系统，由于其开源免费，在web开发方面占有重要地位。<br><a id="more"></a><br>今天我们所说的是mysql的命令行模式，不同于常规的视图操作界面。</p>
<h4 id="mysql服务相关"><a href="#mysql服务相关" class="headerlink" title="mysql服务相关"></a>mysql服务相关</h4><p>　　我们可以这样理解，mysql的正常运行离不开mysql服务的正常启动。所有对于这些我们必须掌握。</p>
<ul>
<li>启动mysql服务<br>可以使用命令:<ul>
<li>mysql脚本启动: <code>/etc/init.d/mysqld start</code></li>
<li>service服务启动:<code>service mysqld start</code></li>
<li>使用safe_mysqld启动:<code>safe_mysqld&amp;</code></li>
</ul>
</li>
<li>停止服务<ul>
<li>使用service停止:<code>service mysqld stop</code></li>
<li>使用mysqld脚本停止:<code>/etc/init.d/mysqld stop</code></li>
</ul>
</li>
<li>重启<ul>
<li>使用service重启:<code>service mysqld restart</code></li>
<li>使用mysqld脚本重启:<code>/etc/init.d/mysqld restart</code><br>备注:查看mysql端口是否已经使用，使用netstat -anp命令查询服务器端口使用情况。</li>
</ul>
</li>
</ul>
<h4 id="进入mysql"><a href="#进入mysql" class="headerlink" title="进入mysql"></a>进入mysql</h4><ul>
<li><p>连接本地(在安装目录下操作)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /mysql/bin#与具体安全目录有关</div><div class="line">mysql -u root -p #回车后输入密码</div><div class="line">mysql&gt; #成功后显示</div></pre></td></tr></table></figure>
</li>
<li><p>连接远程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -h 110.110.110.110 -u root -p 123;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注:其实各参数与数据可以不用加空格。</p>
<h4 id="退出mysql"><a href="#退出mysql" class="headerlink" title="退出mysql"></a>退出mysql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exit(回车)</div></pre></td></tr></table></figure>
<h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><ul>
<li>给root加个密码abcd1234<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin -u root -password abcd1234</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注:之前root没有密码，所有-p旧密码可以省略。</p>
<ul>
<li>修改root密码为1234abcd<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin -u root -p abcd1234 password 1234abcd</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h4><p>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”<br>注：个人觉得有些繁琐，且大部分时间不会新增，特此google即可。</p>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>命令:<code>create database &lt;数据库名&gt;</code></p>
<h4 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h4><p>命令：<code>show databases;</code></p>
<h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>命令:<code>drop database &lt;数据库名&gt;；</code></p>
<h4 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h4><p>命令:<code>use &lt;数据库名&gt;；<code></code></code></p>
<h4 id="显示数据表"><a href="#显示数据表" class="headerlink" title="显示数据表"></a>显示数据表</h4><p>=====================================</p>
<p>   待完善<a href="http://www.cnblogs.com/zhangzhu/archive/2013/07/04/3172486.html" target="_blank" rel="external">http://www.cnblogs.com/zhangzhu/archive/2013/07/04/3172486.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql是一个关系型数据库管理系统，由于其开源免费，在web开发方面占有重要地位。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.jb-hacker.top/categories/PHP/"/>
    
    
      <category term="mysql" scheme="http://www.jb-hacker.top/tags/mysql/"/>
    
      <category term="php" scheme="http://www.jb-hacker.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>vim的简单使用</title>
    <link href="http://www.jb-hacker.top/3.html/"/>
    <id>http://www.jb-hacker.top/3.html/</id>
    <published>2017-05-09T16:00:00.000Z</published>
    <updated>2017-05-10T12:42:39.383Z</updated>
    
    <content type="html"><![CDATA[<p>vim是一个类似于vi的著名的功能强大、高度可定制的文本编辑器，在vi的基础上改进和增加了很多特性。vim是自由软件。<br><a id="more"></a><br>其实vim有着很强悍的操作语法，但是在这我只是介绍一些常用能解决文章的基本操作，原因很简单：适合新手！</p>
<h4 id="vi的基本概念"><a href="#vi的基本概念" class="headerlink" title="vi的基本概念"></a>vi的基本概念</h4><p>　　基本上vi可以分为三种状态，分别是命令模式、插入模式和底行模式，各模式的功能区分如下：</p>
<ul>
<li>命令行模式</li>
</ul>
<p>　　控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入插入模式下，<br>或者到底行模式。</p>
<ul>
<li><p>插入模式<br>　　只有在插入模式下，才可以做文字输入，按「ESC」键可回到命令行模式。</p>
</li>
<li><p>底行模式</p>
</li>
</ul>
<p>将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。<br>不过一般我们在使用时把vi简化成两个模式，就是将底行模式也算入命令行模式。</p>
<ul>
<li><p>进命令行模式<br>在进入插入模式后，你只要按[Esc]就可以从插入模式进入命令行模型了。</p>
</li>
<li><p>进入插入模式<br>刚开始打开vim，你必须按i才能进入插入模式。</p>
</li>
<li><p>进入底行模式<br>在使用底行模式之前，请记住先按「ESC」键确定您已经处于命令行模式下后，再按「：」冒号即可进入底行模式。</p>
</li>
</ul>
<h4 id="vim的常规操作"><a href="#vim的常规操作" class="headerlink" title="vim的常规操作"></a>vim的常规操作</h4><ul>
<li>列出行号</li>
</ul>
<p>　「set nu」：输入「set nu」后，会在文件中的每一行前面列出行号。</p>
<ul>
<li>跳到文件中的某一行</li>
</ul>
<p>　「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，<br>如输入数字15，再回车，就会跳到文章的第15行。</p>
<ul>
<li>查找字符</li>
</ul>
<p>　「/关键字」：先按「/」键，再输入您想寻找的字符，如果第一次找的关键字不是您想<br>要的，可以一直按「n」会往后寻找到您要的关键字为止。</p>
<p>　「?关键字」：先按「?」键，再输入您想寻找的字符，如果第一次找的关键字不是您想<br>要的，可以一直按「n」会往前寻找到您要的关键字为止。</p>
<ul>
<li>保存文件</li>
</ul>
<p>　「w」：在冒号输入字母「w」就可以将文件保存起来。</p>
<ul>
<li><p>保存并退出<br>　按ESC键 跳到命令模式，然后：<br>　:w   保存文件但不退出vi<br>　:w file 将修改另外保存到file中，不退出vi<br>　:w!   强制保存，不推出vi<br>　:wq  保存文件并退出vi（常用）<br>　:wq! 强制保存文件，并退出vi（常用）<br>　q:  不保存文件，退出vi<br>　:q! 不保存文件，强制退出vi<br>　:e! 放弃所有修改，从上次保存文件开始再编辑</p>
</li>
<li><p>离开vi</p>
</li>
</ul>
<p>　「q」：按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi。</p>
<p>　「wq」：一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vim是一个类似于vi的著名的功能强大、高度可定制的文本编辑器，在vi的基础上改进和增加了很多特性。vim是自由软件。&lt;br&gt;
    
    </summary>
    
      <category term="Liunx" scheme="http://www.jb-hacker.top/categories/Liunx/"/>
    
    
      <category term="vim" scheme="http://www.jb-hacker.top/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>git的常规使用</title>
    <link href="http://www.jb-hacker.top/2.html/"/>
    <id>http://www.jb-hacker.top/2.html/</id>
    <published>2017-05-08T16:00:00.000Z</published>
    <updated>2017-05-09T05:40:46.913Z</updated>
    
    <content type="html"><![CDATA[<p>首先需要本地git与远程github相连接。采取SSH连接方式。<br>此次教程对于git的使用做一个常规使用的总结，更多高级使用并未涉及。<br><a id="more"></a></p>
<h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><h4 id="创建ssh-key"><a href="#创建ssh-key" class="headerlink" title="创建ssh key"></a>创建ssh key</h4><p>为了让github能够识别是我们自己上传文件，需要创建ssh key<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ssh-keygen -t rsa -C &quot;your_email@youreamil.com&quot;</div></pre></td></tr></table></figure></p>
<p>这里的your_email@youremail.com是你的邮箱地址，在输入后会询问你是否保存创建的ssh key，点回车就好，然后要求输入你要设置的密码，如果直接回车表示不设密码。然后会提示你ssh key已经创建好。</p>
<h4 id="将ssh写入github"><a href="#将ssh写入github" class="headerlink" title="将ssh写入github"></a>将ssh写入github</h4><p>在windows中生成的id_rsa.pub文件一般在C:\Users\windows用户名\.ssh目录下，打开隐藏文件即可看到。<br>复制出来，在github在点击头像，然后点击setting，在找到SSH and GPG keys，创建一个new ssh key，然后将刚刚复制的ssh key填入即可。</p>
<h4 id="验证是否连接成功"><a href="#验证是否连接成功" class="headerlink" title="验证是否连接成功"></a>验证是否连接成功</h4><p>在终端输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>如果回车看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">You’ve successfully authenticated, but GitHub does not provide shell access 。</div></pre></td></tr></table></figure></p>
<p>表示已成功连上github。</p>
<h4 id="设置username和email"><a href="#设置username和email" class="headerlink" title="设置username和email"></a>设置username和email</h4><p>在把本项目上传到github之前还需要分别输入设置username和email，因为github每次commit都会记录他们。所以分别输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;your name&quot;</div><div class="line">$ git config --global user.email &quot;your_email@youremail.com&quot;</div></pre></td></tr></table></figure></p>
<h4 id="添加远程地址"><a href="#添加远程地址" class="headerlink" title="添加远程地址"></a>添加远程地址</h4><p>在与github连接成功后，如何才能让相应的项目上传到对应的仓库呢？这里就需要添加远程地址，从而让我们的本地项目顺利到达对应的仓库。</p>
<p>打开终端，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:yourName/yourRepo.git</div></pre></td></tr></table></figure></p>
<h3 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h3><h4 id="进入项目，在终端运行"><a href="#进入项目，在终端运行" class="headerlink" title="进入项目，在终端运行"></a>进入项目，在终端运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure>
<p>查看当前目录索引还没有被git管理的文件和被git管理而被修改但还没有提交(git commit)的文件。</p>
<h4 id="将远程库与本地库合并"><a href="#将远程库与本地库合并" class="headerlink" title="将远程库与本地库合并"></a>将远程库与本地库合并</h4><p>(注:pull=fetch +merge )：(刚刚添加时本地没有说明文件)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull --rebase origin master</div></pre></td></tr></table></figure></p>
<h4 id="然后上传所有"><a href="#然后上传所有" class="headerlink" title="然后上传所有"></a>然后上传所有</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add .</div></pre></td></tr></table></figure>
<h4 id="添加注释并上传到缓存区"><a href="#添加注释并上传到缓存区" class="headerlink" title="添加注释并上传到缓存区"></a>添加注释并上传到缓存区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m  &apos;本次提交注释&apos;</div></pre></td></tr></table></figure>
<p>提交并上传代码，第一次提交加上’-u’,后面提交可以省略。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin master</div></pre></td></tr></table></figure></p>
<h3 id="以后提交"><a href="#以后提交" class="headerlink" title="以后提交"></a>以后提交</h3><ul>
<li><p>上传所有</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add .</div></pre></td></tr></table></figure>
</li>
<li><p>添加注释并上传到缓存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m  &apos;本次提交注释&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>提交并上传代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如此往复即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先需要本地git与远程github相连接。采取SSH连接方式。&lt;br&gt;此次教程对于git的使用做一个常规使用的总结，更多高级使用并未涉及。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.jb-hacker.top/categories/PHP/"/>
    
    
      <category term="git" scheme="http://www.jb-hacker.top/tags/git/"/>
    
      <category term="github" scheme="http://www.jb-hacker.top/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>建立博客</title>
    <link href="http://www.jb-hacker.top/1.html/"/>
    <id>http://www.jb-hacker.top/1.html/</id>
    <published>2017-05-05T16:00:00.000Z</published>
    <updated>2017-05-13T08:50:33.751Z</updated>
    
    <content type="html"><![CDATA[<p>由于诸多原因，我最终选择了hexo+github搭建博客，原因嘛有很多。但是markdown的编写方式和纯命令的编辑方式是我所喜爱的。<br><a id="more"></a><br>我不知道在其他人眼里git意味着什么，但是不知不觉中我觉得我思想发生了一些改变。喜欢上了一些高大上的程序员方式。<br>之前打算用yii2.0搭建博客，但是markdown插件弄了好久都没有弄出来，然后按照yii2.0博客程序也存在弊端；node.js搭建博客弄了弄，使用了Ghost博客程序也不太喜欢，发现英文大多不太喜欢，而且服务器的配置太繁琐，不想hexo几行命令即可搞定。<br>不过我从头到尾都没有想过使用WordPress，原因很简单，没有轻量级的书写方式，不够简洁，我觉得博客的本质应该是写作。<br>专注于写作和学习，这才是我建立博客的主旨。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于诸多原因，我最终选择了hexo+github搭建博客，原因嘛有很多。但是markdown的编写方式和纯命令的编辑方式是我所喜爱的。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
